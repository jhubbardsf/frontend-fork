/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Types {
  export type BlockLeafStruct = {
    blockHash: BytesLike;
    height: BigNumberish;
    cumulativeChainwork: BigNumberish;
  };

  export type BlockLeafStructOutput = [string, number, BigNumber] & {
    blockHash: string;
    height: number;
    cumulativeChainwork: BigNumber;
  };

  export type DepositLiquidityParamsStruct = {
    depositOwnerAddress: string;
    specifiedPayoutAddress: string;
    depositAmount: BigNumberish;
    expectedSats: BigNumberish;
    btcPayoutScriptPubKey: BytesLike;
    depositSalt: BytesLike;
    confirmationBlocks: BigNumberish;
    safeBlockLeaf: Types.BlockLeafStruct;
    safeBlockSiblings: BytesLike[];
    safeBlockPeaks: BytesLike[];
  };

  export type DepositLiquidityParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    number,
    Types.BlockLeafStructOutput,
    string[],
    string[]
  ] & {
    depositOwnerAddress: string;
    specifiedPayoutAddress: string;
    depositAmount: BigNumber;
    expectedSats: BigNumber;
    btcPayoutScriptPubKey: string;
    depositSalt: string;
    confirmationBlocks: number;
    safeBlockLeaf: Types.BlockLeafStructOutput;
    safeBlockSiblings: string[];
    safeBlockPeaks: string[];
  };

  export type BundlerResultStruct = {
    initialCbBTCBalance: BigNumberish;
    finalCbBTCBalance: BigNumberish;
    cbBTCReceived: BigNumberish;
  };

  export type BundlerResultStructOutput = [BigNumber, BigNumber, BigNumber] & {
    initialCbBTCBalance: BigNumber;
    finalCbBTCBalance: BigNumber;
    cbBTCReceived: BigNumber;
  };
}

export declare namespace ISignatureTransfer {
  export type TokenPermissionsStruct = { token: string; amount: BigNumberish };

  export type TokenPermissionsStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type PermitTransferFromStruct = {
    permitted: ISignatureTransfer.TokenPermissionsStruct;
    nonce: BigNumberish;
    deadline: BigNumberish;
  };

  export type PermitTransferFromStructOutput = [
    ISignatureTransfer.TokenPermissionsStructOutput,
    BigNumber,
    BigNumber
  ] & {
    permitted: ISignatureTransfer.TokenPermissionsStructOutput;
    nonce: BigNumber;
    deadline: BigNumber;
  };
}

export interface IBundlerInterface extends utils.Interface {
  functions: {
    "cbBTC()": FunctionFragment;
    "executeSwapAndDeposit(uint256,bytes,(address,address,uint256,uint64,bytes22,bytes32,uint8,(bytes32,uint32,uint256),bytes32[],bytes32[]),address,((address,uint256),uint256,uint256),bytes)": FunctionFragment;
    "permit2()": FunctionFragment;
    "riftExchange()": FunctionFragment;
    "swapRouter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cbBTC"
      | "executeSwapAndDeposit"
      | "permit2"
      | "riftExchange"
      | "swapRouter"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "cbBTC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeSwapAndDeposit",
    values: [
      BigNumberish,
      BytesLike,
      Types.DepositLiquidityParamsStruct,
      string,
      ISignatureTransfer.PermitTransferFromStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "riftExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cbBTC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "riftExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;

  events: {};
}

export interface IBundler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBundlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cbBTC(overrides?: CallOverrides): Promise<[string]>;

    executeSwapAndDeposit(
      amountIn: BigNumberish,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      owner: string,
      permit: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    permit2(overrides?: CallOverrides): Promise<[string]>;

    riftExchange(overrides?: CallOverrides): Promise<[string]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  cbBTC(overrides?: CallOverrides): Promise<string>;

  executeSwapAndDeposit(
    amountIn: BigNumberish,
    swapCalldata: BytesLike,
    params: Types.DepositLiquidityParamsStruct,
    owner: string,
    permit: ISignatureTransfer.PermitTransferFromStruct,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  permit2(overrides?: CallOverrides): Promise<string>;

  riftExchange(overrides?: CallOverrides): Promise<string>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cbBTC(overrides?: CallOverrides): Promise<string>;

    executeSwapAndDeposit(
      amountIn: BigNumberish,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      owner: string,
      permit: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<Types.BundlerResultStructOutput>;

    permit2(overrides?: CallOverrides): Promise<string>;

    riftExchange(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    cbBTC(overrides?: CallOverrides): Promise<BigNumber>;

    executeSwapAndDeposit(
      amountIn: BigNumberish,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      owner: string,
      permit: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    permit2(overrides?: CallOverrides): Promise<BigNumber>;

    riftExchange(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cbBTC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeSwapAndDeposit(
      amountIn: BigNumberish,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      owner: string,
      permit: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    permit2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riftExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
