/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Types {
  export type ProposedSwapStruct = {
    swapIndex: BigNumberish;
    depositVaultCommitment: BytesLike;
    swapBitcoinBlockHash: BytesLike;
    confirmationBlocks: BigNumberish;
    liquidityUnlockTimestamp: BigNumberish;
    specifiedPayoutAddress: string;
    totalSwapFee: BigNumberish;
    totalSwapOutput: BigNumberish;
    state: BigNumberish;
  };

  export type ProposedSwapStructOutput = [
    BigNumber,
    string,
    string,
    number,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number
  ] & {
    swapIndex: BigNumber;
    depositVaultCommitment: string;
    swapBitcoinBlockHash: string;
    confirmationBlocks: number;
    liquidityUnlockTimestamp: BigNumber;
    specifiedPayoutAddress: string;
    totalSwapFee: BigNumber;
    totalSwapOutput: BigNumber;
    state: number;
  };

  export type DepositVaultStruct = {
    vaultIndex: BigNumberish;
    depositTimestamp: BigNumberish;
    depositAmount: BigNumberish;
    depositFee: BigNumberish;
    expectedSats: BigNumberish;
    btcPayoutScriptPubKey: BytesLike;
    specifiedPayoutAddress: string;
    ownerAddress: string;
    salt: BytesLike;
    confirmationBlocks: BigNumberish;
    attestedBitcoinBlockHeight: BigNumberish;
  };

  export type DepositVaultStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    number,
    BigNumber
  ] & {
    vaultIndex: BigNumber;
    depositTimestamp: BigNumber;
    depositAmount: BigNumber;
    depositFee: BigNumber;
    expectedSats: BigNumber;
    btcPayoutScriptPubKey: string;
    specifiedPayoutAddress: string;
    ownerAddress: string;
    salt: string;
    confirmationBlocks: number;
    attestedBitcoinBlockHeight: BigNumber;
  };
}

export interface EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "BitcoinLightClientUpdated(bytes32,bytes32,bytes)": EventFragment;
    "BundlerExecution(address,uint256)": EventFragment;
    "PermitTransferExecuted(address,uint256)": EventFragment;
    "RiftDepositExecuted(address,uint256)": EventFragment;
    "SwapExecuted(uint256,uint256,uint256)": EventFragment;
    "SwapsUpdated((uint256,bytes32,bytes32,uint8,uint64,address,uint256,uint256,uint8)[],uint8)": EventFragment;
    "VaultsUpdated((uint256,uint64,uint256,uint256,uint64,bytes22,address,address,bytes32,uint8,uint64)[],uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BitcoinLightClientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BundlerExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermitTransferExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiftDepositExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultsUpdated"): EventFragment;
}

export interface BitcoinLightClientUpdatedEventObject {
  priorMmrRoot: string;
  newMmrRoot: string;
  compressedBlockLeaves: string;
}
export type BitcoinLightClientUpdatedEvent = TypedEvent<
  [string, string, string],
  BitcoinLightClientUpdatedEventObject
>;

export type BitcoinLightClientUpdatedEventFilter =
  TypedEventFilter<BitcoinLightClientUpdatedEvent>;

export interface BundlerExecutionEventObject {
  owner: string;
  cbBTCReceived: BigNumber;
}
export type BundlerExecutionEvent = TypedEvent<
  [string, BigNumber],
  BundlerExecutionEventObject
>;

export type BundlerExecutionEventFilter =
  TypedEventFilter<BundlerExecutionEvent>;

export interface PermitTransferExecutedEventObject {
  owner: string;
  numTransfers: BigNumber;
}
export type PermitTransferExecutedEvent = TypedEvent<
  [string, BigNumber],
  PermitTransferExecutedEventObject
>;

export type PermitTransferExecutedEventFilter =
  TypedEventFilter<PermitTransferExecutedEvent>;

export interface RiftDepositExecutedEventObject {
  riftExchange: string;
  depositAmount: BigNumber;
}
export type RiftDepositExecutedEvent = TypedEvent<
  [string, BigNumber],
  RiftDepositExecutedEventObject
>;

export type RiftDepositExecutedEventFilter =
  TypedEventFilter<RiftDepositExecutedEvent>;

export interface SwapExecutedEventObject {
  initialCbBTCBalance: BigNumber;
  finalCbBTCBalance: BigNumber;
  cbBTCReceived: BigNumber;
}
export type SwapExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SwapExecutedEventObject
>;

export type SwapExecutedEventFilter = TypedEventFilter<SwapExecutedEvent>;

export interface SwapsUpdatedEventObject {
  swaps: Types.ProposedSwapStructOutput[];
  context: number;
}
export type SwapsUpdatedEvent = TypedEvent<
  [Types.ProposedSwapStructOutput[], number],
  SwapsUpdatedEventObject
>;

export type SwapsUpdatedEventFilter = TypedEventFilter<SwapsUpdatedEvent>;

export interface VaultsUpdatedEventObject {
  vaults: Types.DepositVaultStructOutput[];
  context: number;
}
export type VaultsUpdatedEvent = TypedEvent<
  [Types.DepositVaultStructOutput[], number],
  VaultsUpdatedEventObject
>;

export type VaultsUpdatedEventFilter = TypedEventFilter<VaultsUpdatedEvent>;

export interface Events extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BitcoinLightClientUpdated(bytes32,bytes32,bytes)"(
      priorMmrRoot?: null,
      newMmrRoot?: null,
      compressedBlockLeaves?: null
    ): BitcoinLightClientUpdatedEventFilter;
    BitcoinLightClientUpdated(
      priorMmrRoot?: null,
      newMmrRoot?: null,
      compressedBlockLeaves?: null
    ): BitcoinLightClientUpdatedEventFilter;

    "BundlerExecution(address,uint256)"(
      owner?: string | null,
      cbBTCReceived?: null
    ): BundlerExecutionEventFilter;
    BundlerExecution(
      owner?: string | null,
      cbBTCReceived?: null
    ): BundlerExecutionEventFilter;

    "PermitTransferExecuted(address,uint256)"(
      owner?: string | null,
      numTransfers?: null
    ): PermitTransferExecutedEventFilter;
    PermitTransferExecuted(
      owner?: string | null,
      numTransfers?: null
    ): PermitTransferExecutedEventFilter;

    "RiftDepositExecuted(address,uint256)"(
      riftExchange?: string | null,
      depositAmount?: null
    ): RiftDepositExecutedEventFilter;
    RiftDepositExecuted(
      riftExchange?: string | null,
      depositAmount?: null
    ): RiftDepositExecutedEventFilter;

    "SwapExecuted(uint256,uint256,uint256)"(
      initialCbBTCBalance?: null,
      finalCbBTCBalance?: null,
      cbBTCReceived?: null
    ): SwapExecutedEventFilter;
    SwapExecuted(
      initialCbBTCBalance?: null,
      finalCbBTCBalance?: null,
      cbBTCReceived?: null
    ): SwapExecutedEventFilter;

    "SwapsUpdated((uint256,bytes32,bytes32,uint8,uint64,address,uint256,uint256,uint8)[],uint8)"(
      swaps?: null,
      context?: null
    ): SwapsUpdatedEventFilter;
    SwapsUpdated(swaps?: null, context?: null): SwapsUpdatedEventFilter;

    "VaultsUpdated((uint256,uint64,uint256,uint256,uint64,bytes22,address,address,bytes32,uint8,uint64)[],uint8)"(
      vaults?: null,
      context?: null
    ): VaultsUpdatedEventFilter;
    VaultsUpdated(vaults?: null, context?: null): VaultsUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
