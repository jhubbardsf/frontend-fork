/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export declare namespace Types {
  export type ProposedSwapStruct = {
    swapIndex: BigNumberish;
    depositVaultCommitment: BytesLike;
    swapBitcoinBlockHash: BytesLike;
    confirmationBlocks: BigNumberish;
    liquidityUnlockTimestamp: BigNumberish;
    specifiedPayoutAddress: AddressLike;
    totalSwapFee: BigNumberish;
    totalSwapOutput: BigNumberish;
    state: BigNumberish;
  };

  export type ProposedSwapStructOutput = [
    swapIndex: bigint,
    depositVaultCommitment: string,
    swapBitcoinBlockHash: string,
    confirmationBlocks: bigint,
    liquidityUnlockTimestamp: bigint,
    specifiedPayoutAddress: string,
    totalSwapFee: bigint,
    totalSwapOutput: bigint,
    state: bigint
  ] & {
    swapIndex: bigint;
    depositVaultCommitment: string;
    swapBitcoinBlockHash: string;
    confirmationBlocks: bigint;
    liquidityUnlockTimestamp: bigint;
    specifiedPayoutAddress: string;
    totalSwapFee: bigint;
    totalSwapOutput: bigint;
    state: bigint;
  };

  export type DepositVaultStruct = {
    vaultIndex: BigNumberish;
    depositTimestamp: BigNumberish;
    depositAmount: BigNumberish;
    depositFee: BigNumberish;
    expectedSats: BigNumberish;
    btcPayoutScriptPubKey: BytesLike;
    specifiedPayoutAddress: AddressLike;
    ownerAddress: AddressLike;
    salt: BytesLike;
    confirmationBlocks: BigNumberish;
    attestedBitcoinBlockHeight: BigNumberish;
  };

  export type DepositVaultStructOutput = [
    vaultIndex: bigint,
    depositTimestamp: bigint,
    depositAmount: bigint,
    depositFee: bigint,
    expectedSats: bigint,
    btcPayoutScriptPubKey: string,
    specifiedPayoutAddress: string,
    ownerAddress: string,
    salt: string,
    confirmationBlocks: bigint,
    attestedBitcoinBlockHeight: bigint
  ] & {
    vaultIndex: bigint;
    depositTimestamp: bigint;
    depositAmount: bigint;
    depositFee: bigint;
    expectedSats: bigint;
    btcPayoutScriptPubKey: string;
    specifiedPayoutAddress: string;
    ownerAddress: string;
    salt: string;
    confirmationBlocks: bigint;
    attestedBitcoinBlockHeight: bigint;
  };
}

export interface EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "BitcoinLightClientUpdated"
      | "BundlerExecution"
      | "PermitTransferExecuted"
      | "RiftDepositExecuted"
      | "SwapExecuted"
      | "SwapsUpdated"
      | "VaultsUpdated"
  ): EventFragment;
}

export namespace BitcoinLightClientUpdatedEvent {
  export type InputTuple = [
    priorMmrRoot: BytesLike,
    newMmrRoot: BytesLike,
    compressedBlockLeaves: BytesLike
  ];
  export type OutputTuple = [
    priorMmrRoot: string,
    newMmrRoot: string,
    compressedBlockLeaves: string
  ];
  export interface OutputObject {
    priorMmrRoot: string;
    newMmrRoot: string;
    compressedBlockLeaves: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BundlerExecutionEvent {
  export type InputTuple = [owner: AddressLike, cbBTCReceived: BigNumberish];
  export type OutputTuple = [owner: string, cbBTCReceived: bigint];
  export interface OutputObject {
    owner: string;
    cbBTCReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermitTransferExecutedEvent {
  export type InputTuple = [owner: AddressLike, numTransfers: BigNumberish];
  export type OutputTuple = [owner: string, numTransfers: bigint];
  export interface OutputObject {
    owner: string;
    numTransfers: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RiftDepositExecutedEvent {
  export type InputTuple = [
    riftExchange: AddressLike,
    depositAmount: BigNumberish
  ];
  export type OutputTuple = [riftExchange: string, depositAmount: bigint];
  export interface OutputObject {
    riftExchange: string;
    depositAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    initialCbBTCBalance: BigNumberish,
    finalCbBTCBalance: BigNumberish,
    cbBTCReceived: BigNumberish
  ];
  export type OutputTuple = [
    initialCbBTCBalance: bigint,
    finalCbBTCBalance: bigint,
    cbBTCReceived: bigint
  ];
  export interface OutputObject {
    initialCbBTCBalance: bigint;
    finalCbBTCBalance: bigint;
    cbBTCReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapsUpdatedEvent {
  export type InputTuple = [
    swaps: Types.ProposedSwapStruct[],
    context: BigNumberish
  ];
  export type OutputTuple = [
    swaps: Types.ProposedSwapStructOutput[],
    context: bigint
  ];
  export interface OutputObject {
    swaps: Types.ProposedSwapStructOutput[];
    context: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultsUpdatedEvent {
  export type InputTuple = [
    vaults: Types.DepositVaultStruct[],
    context: BigNumberish
  ];
  export type OutputTuple = [
    vaults: Types.DepositVaultStructOutput[],
    context: bigint
  ];
  export interface OutputObject {
    vaults: Types.DepositVaultStructOutput[];
    context: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Events extends BaseContract {
  connect(runner?: ContractRunner | null): Events;
  waitForDeployment(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "BitcoinLightClientUpdated"
  ): TypedContractEvent<
    BitcoinLightClientUpdatedEvent.InputTuple,
    BitcoinLightClientUpdatedEvent.OutputTuple,
    BitcoinLightClientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BundlerExecution"
  ): TypedContractEvent<
    BundlerExecutionEvent.InputTuple,
    BundlerExecutionEvent.OutputTuple,
    BundlerExecutionEvent.OutputObject
  >;
  getEvent(
    key: "PermitTransferExecuted"
  ): TypedContractEvent<
    PermitTransferExecutedEvent.InputTuple,
    PermitTransferExecutedEvent.OutputTuple,
    PermitTransferExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RiftDepositExecuted"
  ): TypedContractEvent<
    RiftDepositExecutedEvent.InputTuple,
    RiftDepositExecutedEvent.OutputTuple,
    RiftDepositExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SwapsUpdated"
  ): TypedContractEvent<
    SwapsUpdatedEvent.InputTuple,
    SwapsUpdatedEvent.OutputTuple,
    SwapsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultsUpdated"
  ): TypedContractEvent<
    VaultsUpdatedEvent.InputTuple,
    VaultsUpdatedEvent.OutputTuple,
    VaultsUpdatedEvent.OutputObject
  >;

  filters: {
    "BitcoinLightClientUpdated(bytes32,bytes32,bytes)": TypedContractEvent<
      BitcoinLightClientUpdatedEvent.InputTuple,
      BitcoinLightClientUpdatedEvent.OutputTuple,
      BitcoinLightClientUpdatedEvent.OutputObject
    >;
    BitcoinLightClientUpdated: TypedContractEvent<
      BitcoinLightClientUpdatedEvent.InputTuple,
      BitcoinLightClientUpdatedEvent.OutputTuple,
      BitcoinLightClientUpdatedEvent.OutputObject
    >;

    "BundlerExecution(address,uint256)": TypedContractEvent<
      BundlerExecutionEvent.InputTuple,
      BundlerExecutionEvent.OutputTuple,
      BundlerExecutionEvent.OutputObject
    >;
    BundlerExecution: TypedContractEvent<
      BundlerExecutionEvent.InputTuple,
      BundlerExecutionEvent.OutputTuple,
      BundlerExecutionEvent.OutputObject
    >;

    "PermitTransferExecuted(address,uint256)": TypedContractEvent<
      PermitTransferExecutedEvent.InputTuple,
      PermitTransferExecutedEvent.OutputTuple,
      PermitTransferExecutedEvent.OutputObject
    >;
    PermitTransferExecuted: TypedContractEvent<
      PermitTransferExecutedEvent.InputTuple,
      PermitTransferExecutedEvent.OutputTuple,
      PermitTransferExecutedEvent.OutputObject
    >;

    "RiftDepositExecuted(address,uint256)": TypedContractEvent<
      RiftDepositExecutedEvent.InputTuple,
      RiftDepositExecutedEvent.OutputTuple,
      RiftDepositExecutedEvent.OutputObject
    >;
    RiftDepositExecuted: TypedContractEvent<
      RiftDepositExecutedEvent.InputTuple,
      RiftDepositExecutedEvent.OutputTuple,
      RiftDepositExecutedEvent.OutputObject
    >;

    "SwapExecuted(uint256,uint256,uint256)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;

    "SwapsUpdated(tuple[],uint8)": TypedContractEvent<
      SwapsUpdatedEvent.InputTuple,
      SwapsUpdatedEvent.OutputTuple,
      SwapsUpdatedEvent.OutputObject
    >;
    SwapsUpdated: TypedContractEvent<
      SwapsUpdatedEvent.InputTuple,
      SwapsUpdatedEvent.OutputTuple,
      SwapsUpdatedEvent.OutputObject
    >;

    "VaultsUpdated(tuple[],uint8)": TypedContractEvent<
      VaultsUpdatedEvent.InputTuple,
      VaultsUpdatedEvent.OutputTuple,
      VaultsUpdatedEvent.OutputObject
    >;
    VaultsUpdated: TypedContractEvent<
      VaultsUpdatedEvent.InputTuple,
      VaultsUpdatedEvent.OutputTuple,
      VaultsUpdatedEvent.OutputObject
    >;
  };
}
