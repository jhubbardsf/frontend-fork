/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type BlockLeafStruct = {
  blockHash: BytesLike;
  height: BigNumberish;
  cumulativeChainwork: BigNumberish;
};

export type BlockLeafStructOutput = [
  blockHash: string,
  height: bigint,
  cumulativeChainwork: bigint
] & { blockHash: string; height: bigint; cumulativeChainwork: bigint };

export type DepositLiquidityParamsStruct = {
  depositOwnerAddress: AddressLike;
  specifiedPayoutAddress: AddressLike;
  depositAmount: BigNumberish;
  expectedSats: BigNumberish;
  btcPayoutScriptPubKey: BytesLike;
  depositSalt: BytesLike;
  confirmationBlocks: BigNumberish;
  safeBlockLeaf: BlockLeafStruct;
  safeBlockSiblings: BytesLike[];
  safeBlockPeaks: BytesLike[];
};

export type DepositLiquidityParamsStructOutput = [
  depositOwnerAddress: string,
  specifiedPayoutAddress: string,
  depositAmount: bigint,
  expectedSats: bigint,
  btcPayoutScriptPubKey: string,
  depositSalt: string,
  confirmationBlocks: bigint,
  safeBlockLeaf: BlockLeafStructOutput,
  safeBlockSiblings: string[],
  safeBlockPeaks: string[]
] & {
  depositOwnerAddress: string;
  specifiedPayoutAddress: string;
  depositAmount: bigint;
  expectedSats: bigint;
  btcPayoutScriptPubKey: string;
  depositSalt: string;
  confirmationBlocks: bigint;
  safeBlockLeaf: BlockLeafStructOutput;
  safeBlockSiblings: string[];
  safeBlockPeaks: string[];
};

export interface IRiftExchangeInterface extends Interface {
  getFunction(nameOrSignature: "depositLiquidity"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositLiquidity",
    values: [DepositLiquidityParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositLiquidity",
    data: BytesLike
  ): Result;
}

export interface IRiftExchange extends BaseContract {
  connect(runner?: ContractRunner | null): IRiftExchange;
  waitForDeployment(): Promise<this>;

  interface: IRiftExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositLiquidity: TypedContractMethod<
    [params: DepositLiquidityParamsStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositLiquidity"
  ): TypedContractMethod<
    [params: DepositLiquidityParamsStruct],
    [void],
    "nonpayable"
  >;

  filters: {};
}
