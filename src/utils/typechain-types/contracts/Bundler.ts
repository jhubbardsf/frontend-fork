/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ISignatureTransfer {
  export type TokenPermissionsStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type TokenPermissionsStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type PermitTransferFromStruct = {
    permitted: ISignatureTransfer.TokenPermissionsStruct;
    nonce: BigNumberish;
    deadline: BigNumberish;
  };

  export type PermitTransferFromStructOutput = [
    permitted: ISignatureTransfer.TokenPermissionsStructOutput,
    nonce: bigint,
    deadline: bigint
  ] & {
    permitted: ISignatureTransfer.TokenPermissionsStructOutput;
    nonce: bigint;
    deadline: bigint;
  };
}

export declare namespace Types {
  export type BundlerResultStruct = {
    initialCbBTCBalance: BigNumberish;
    finalCbBTCBalance: BigNumberish;
    cbBTCReceived: BigNumberish;
  };

  export type BundlerResultStructOutput = [
    initialCbBTCBalance: bigint,
    finalCbBTCBalance: bigint,
    cbBTCReceived: bigint
  ] & {
    initialCbBTCBalance: bigint;
    finalCbBTCBalance: bigint;
    cbBTCReceived: bigint;
  };

  export type BlockLeafStruct = {
    blockHash: BytesLike;
    height: BigNumberish;
    cumulativeChainwork: BigNumberish;
  };

  export type BlockLeafStructOutput = [
    blockHash: string,
    height: bigint,
    cumulativeChainwork: bigint
  ] & { blockHash: string; height: bigint; cumulativeChainwork: bigint };

  export type DepositLiquidityParamsStruct = {
    depositOwnerAddress: AddressLike;
    specifiedPayoutAddress: AddressLike;
    depositAmount: BigNumberish;
    expectedSats: BigNumberish;
    btcPayoutScriptPubKey: BytesLike;
    depositSalt: BytesLike;
    confirmationBlocks: BigNumberish;
    safeBlockLeaf: Types.BlockLeafStruct;
    safeBlockSiblings: BytesLike[];
    safeBlockPeaks: BytesLike[];
  };

  export type DepositLiquidityParamsStructOutput = [
    depositOwnerAddress: string,
    specifiedPayoutAddress: string,
    depositAmount: bigint,
    expectedSats: bigint,
    btcPayoutScriptPubKey: string,
    depositSalt: string,
    confirmationBlocks: bigint,
    safeBlockLeaf: Types.BlockLeafStructOutput,
    safeBlockSiblings: string[],
    safeBlockPeaks: string[]
  ] & {
    depositOwnerAddress: string;
    specifiedPayoutAddress: string;
    depositAmount: bigint;
    expectedSats: bigint;
    btcPayoutScriptPubKey: string;
    depositSalt: string;
    confirmationBlocks: bigint;
    safeBlockLeaf: Types.BlockLeafStructOutput;
    safeBlockSiblings: string[];
    safeBlockPeaks: string[];
  };
}

export interface BundlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_permitTransfer"
      | "approveForSpender"
      | "cbBTC"
      | "executeSwap"
      | "executeSwapAndDeposit"
      | "executeSwapAndDepositTest"
      | "permit2"
      | "permitTransferAndSwapDepositTest"
      | "permitTransferAndSwapTest"
      | "riftExchange"
      | "swapRouter"
      | "universalRouter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BundlerExecution"
      | "PermitTransferExecuted"
      | "RiftDepositExecuted"
      | "SwapExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_permitTransfer",
    values: [
      AddressLike,
      BigNumberish,
      ISignatureTransfer.PermitTransferFromStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveForSpender",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cbBTC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [BytesLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapAndDeposit",
    values: [
      BigNumberish,
      BytesLike,
      Types.DepositLiquidityParamsStruct,
      AddressLike,
      ISignatureTransfer.PermitTransferFromStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapAndDepositTest",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      Types.DepositLiquidityParamsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitTransferAndSwapDepositTest",
    values: [
      AddressLike,
      BigNumberish,
      ISignatureTransfer.PermitTransferFromStruct,
      BytesLike,
      BytesLike,
      Types.DepositLiquidityParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferAndSwapTest",
    values: [
      AddressLike,
      BigNumberish,
      ISignatureTransfer.PermitTransferFromStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "riftExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "universalRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_permitTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveForSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cbBTC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapAndDepositTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferAndSwapDepositTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferAndSwapTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riftExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "universalRouter",
    data: BytesLike
  ): Result;
}

export namespace BundlerExecutionEvent {
  export type InputTuple = [owner: AddressLike, cbBTCReceived: BigNumberish];
  export type OutputTuple = [owner: string, cbBTCReceived: bigint];
  export interface OutputObject {
    owner: string;
    cbBTCReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermitTransferExecutedEvent {
  export type InputTuple = [owner: AddressLike, numTransfers: BigNumberish];
  export type OutputTuple = [owner: string, numTransfers: bigint];
  export interface OutputObject {
    owner: string;
    numTransfers: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RiftDepositExecutedEvent {
  export type InputTuple = [
    riftExchange: AddressLike,
    depositAmount: BigNumberish
  ];
  export type OutputTuple = [riftExchange: string, depositAmount: bigint];
  export interface OutputObject {
    riftExchange: string;
    depositAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    initialCbBTCBalance: BigNumberish,
    finalCbBTCBalance: BigNumberish,
    cbBTCReceived: BigNumberish
  ];
  export type OutputTuple = [
    initialCbBTCBalance: bigint,
    finalCbBTCBalance: bigint,
    cbBTCReceived: bigint
  ];
  export interface OutputObject {
    initialCbBTCBalance: bigint;
    finalCbBTCBalance: bigint;
    cbBTCReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bundler extends BaseContract {
  connect(runner?: ContractRunner | null): Bundler;
  waitForDeployment(): Promise<this>;

  interface: BundlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _permitTransfer: TypedContractMethod<
    [
      owner: AddressLike,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  approveForSpender: TypedContractMethod<
    [amountIn: BigNumberish, spender: AddressLike, tokenIn: AddressLike],
    [void],
    "nonpayable"
  >;

  cbBTC: TypedContractMethod<[], [string], "view">;

  executeSwap: TypedContractMethod<
    [
      swapCalldata: BytesLike,
      owner: AddressLike,
      amountIn: BigNumberish,
      tokenIn: AddressLike
    ],
    [Types.BundlerResultStructOutput],
    "payable"
  >;

  executeSwapAndDeposit: TypedContractMethod<
    [
      amountIn: BigNumberish,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      owner: AddressLike,
      permit: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike
    ],
    [Types.BundlerResultStructOutput],
    "payable"
  >;

  executeSwapAndDepositTest: TypedContractMethod<
    [
      swapCalldata: BytesLike,
      owner: AddressLike,
      amountIn: BigNumberish,
      tokenIn: AddressLike,
      params: Types.DepositLiquidityParamsStruct
    ],
    [Types.BundlerResultStructOutput],
    "payable"
  >;

  permit2: TypedContractMethod<[], [string], "view">;

  permitTransferAndSwapDepositTest: TypedContractMethod<
    [
      owner: AddressLike,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct
    ],
    [void],
    "payable"
  >;

  permitTransferAndSwapTest: TypedContractMethod<
    [
      owner: AddressLike,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike
    ],
    [void],
    "payable"
  >;

  riftExchange: TypedContractMethod<[], [string], "view">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  universalRouter: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_permitTransfer"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveForSpender"
  ): TypedContractMethod<
    [amountIn: BigNumberish, spender: AddressLike, tokenIn: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cbBTC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeSwap"
  ): TypedContractMethod<
    [
      swapCalldata: BytesLike,
      owner: AddressLike,
      amountIn: BigNumberish,
      tokenIn: AddressLike
    ],
    [Types.BundlerResultStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeSwapAndDeposit"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      owner: AddressLike,
      permit: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike
    ],
    [Types.BundlerResultStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeSwapAndDepositTest"
  ): TypedContractMethod<
    [
      swapCalldata: BytesLike,
      owner: AddressLike,
      amountIn: BigNumberish,
      tokenIn: AddressLike,
      params: Types.DepositLiquidityParamsStruct
    ],
    [Types.BundlerResultStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "permit2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permitTransferAndSwapDepositTest"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "permitTransferAndSwapTest"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "riftExchange"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "universalRouter"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BundlerExecution"
  ): TypedContractEvent<
    BundlerExecutionEvent.InputTuple,
    BundlerExecutionEvent.OutputTuple,
    BundlerExecutionEvent.OutputObject
  >;
  getEvent(
    key: "PermitTransferExecuted"
  ): TypedContractEvent<
    PermitTransferExecutedEvent.InputTuple,
    PermitTransferExecutedEvent.OutputTuple,
    PermitTransferExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RiftDepositExecuted"
  ): TypedContractEvent<
    RiftDepositExecutedEvent.InputTuple,
    RiftDepositExecutedEvent.OutputTuple,
    RiftDepositExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;

  filters: {
    "BundlerExecution(address,uint256)": TypedContractEvent<
      BundlerExecutionEvent.InputTuple,
      BundlerExecutionEvent.OutputTuple,
      BundlerExecutionEvent.OutputObject
    >;
    BundlerExecution: TypedContractEvent<
      BundlerExecutionEvent.InputTuple,
      BundlerExecutionEvent.OutputTuple,
      BundlerExecutionEvent.OutputObject
    >;

    "PermitTransferExecuted(address,uint256)": TypedContractEvent<
      PermitTransferExecutedEvent.InputTuple,
      PermitTransferExecutedEvent.OutputTuple,
      PermitTransferExecutedEvent.OutputObject
    >;
    PermitTransferExecuted: TypedContractEvent<
      PermitTransferExecutedEvent.InputTuple,
      PermitTransferExecutedEvent.OutputTuple,
      PermitTransferExecutedEvent.OutputObject
    >;

    "RiftDepositExecuted(address,uint256)": TypedContractEvent<
      RiftDepositExecutedEvent.InputTuple,
      RiftDepositExecutedEvent.OutputTuple,
      RiftDepositExecutedEvent.OutputObject
    >;
    RiftDepositExecuted: TypedContractEvent<
      RiftDepositExecutedEvent.InputTuple,
      RiftDepositExecutedEvent.OutputTuple,
      RiftDepositExecutedEvent.OutputObject
    >;

    "SwapExecuted(uint256,uint256,uint256)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
  };
}
