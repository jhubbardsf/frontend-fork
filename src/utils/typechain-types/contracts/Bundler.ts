/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace ISignatureTransfer {
  export type TokenPermissionsStruct = { token: string; amount: BigNumberish };

  export type TokenPermissionsStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type PermitTransferFromStruct = {
    permitted: ISignatureTransfer.TokenPermissionsStruct;
    nonce: BigNumberish;
    deadline: BigNumberish;
  };

  export type PermitTransferFromStructOutput = [
    ISignatureTransfer.TokenPermissionsStructOutput,
    BigNumber,
    BigNumber
  ] & {
    permitted: ISignatureTransfer.TokenPermissionsStructOutput;
    nonce: BigNumber;
    deadline: BigNumber;
  };
}

export declare namespace Types {
  export type BundlerResultStruct = {
    initialCbBTCBalance: BigNumberish;
    finalCbBTCBalance: BigNumberish;
    cbBTCReceived: BigNumberish;
  };

  export type BundlerResultStructOutput = [BigNumber, BigNumber, BigNumber] & {
    initialCbBTCBalance: BigNumber;
    finalCbBTCBalance: BigNumber;
    cbBTCReceived: BigNumber;
  };

  export type BlockLeafStruct = {
    blockHash: BytesLike;
    height: BigNumberish;
    cumulativeChainwork: BigNumberish;
  };

  export type BlockLeafStructOutput = [string, number, BigNumber] & {
    blockHash: string;
    height: number;
    cumulativeChainwork: BigNumber;
  };

  export type DepositLiquidityParamsStruct = {
    depositOwnerAddress: string;
    specifiedPayoutAddress: string;
    depositAmount: BigNumberish;
    expectedSats: BigNumberish;
    btcPayoutScriptPubKey: BytesLike;
    depositSalt: BytesLike;
    confirmationBlocks: BigNumberish;
    safeBlockLeaf: Types.BlockLeafStruct;
    safeBlockSiblings: BytesLike[];
    safeBlockPeaks: BytesLike[];
  };

  export type DepositLiquidityParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    number,
    Types.BlockLeafStructOutput,
    string[],
    string[]
  ] & {
    depositOwnerAddress: string;
    specifiedPayoutAddress: string;
    depositAmount: BigNumber;
    expectedSats: BigNumber;
    btcPayoutScriptPubKey: string;
    depositSalt: string;
    confirmationBlocks: number;
    safeBlockLeaf: Types.BlockLeafStructOutput;
    safeBlockSiblings: string[];
    safeBlockPeaks: string[];
  };
}

export interface BundlerInterface extends utils.Interface {
  functions: {
    "_permitTransfer(address,uint256,((address,uint256),uint256,uint256),bytes)": FunctionFragment;
    "approveForSpender(uint256,address,address)": FunctionFragment;
    "cbBTC()": FunctionFragment;
    "executeSwap(bytes,address,uint256,address)": FunctionFragment;
    "executeSwapAndDeposit(uint256,bytes,(address,address,uint256,uint64,bytes22,bytes32,uint8,(bytes32,uint32,uint256),bytes32[],bytes32[]),address,((address,uint256),uint256,uint256),bytes)": FunctionFragment;
    "executeSwapAndDepositTest(bytes,address,uint256,address,(address,address,uint256,uint64,bytes22,bytes32,uint8,(bytes32,uint32,uint256),bytes32[],bytes32[]))": FunctionFragment;
    "permit2()": FunctionFragment;
    "permitTransferAndSwapDepositTest(address,uint256,((address,uint256),uint256,uint256),bytes,bytes,(address,address,uint256,uint64,bytes22,bytes32,uint8,(bytes32,uint32,uint256),bytes32[],bytes32[]))": FunctionFragment;
    "permitTransferAndSwapTest(address,uint256,((address,uint256),uint256,uint256),bytes,bytes)": FunctionFragment;
    "riftExchange()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "universalRouter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_permitTransfer"
      | "approveForSpender"
      | "cbBTC"
      | "executeSwap"
      | "executeSwapAndDeposit"
      | "executeSwapAndDepositTest"
      | "permit2"
      | "permitTransferAndSwapDepositTest"
      | "permitTransferAndSwapTest"
      | "riftExchange"
      | "swapRouter"
      | "universalRouter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_permitTransfer",
    values: [
      string,
      BigNumberish,
      ISignatureTransfer.PermitTransferFromStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveForSpender",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "cbBTC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [BytesLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapAndDeposit",
    values: [
      BigNumberish,
      BytesLike,
      Types.DepositLiquidityParamsStruct,
      string,
      ISignatureTransfer.PermitTransferFromStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapAndDepositTest",
    values: [
      BytesLike,
      string,
      BigNumberish,
      string,
      Types.DepositLiquidityParamsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitTransferAndSwapDepositTest",
    values: [
      string,
      BigNumberish,
      ISignatureTransfer.PermitTransferFromStruct,
      BytesLike,
      BytesLike,
      Types.DepositLiquidityParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferAndSwapTest",
    values: [
      string,
      BigNumberish,
      ISignatureTransfer.PermitTransferFromStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "riftExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "universalRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_permitTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveForSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cbBTC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapAndDepositTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferAndSwapDepositTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferAndSwapTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riftExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "universalRouter",
    data: BytesLike
  ): Result;

  events: {
    "BundlerExecution(address,uint256)": EventFragment;
    "PermitTransferExecuted(address,uint256)": EventFragment;
    "RiftDepositExecuted(address,uint256)": EventFragment;
    "SwapExecuted(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BundlerExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermitTransferExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiftDepositExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapExecuted"): EventFragment;
}

export interface BundlerExecutionEventObject {
  owner: string;
  cbBTCReceived: BigNumber;
}
export type BundlerExecutionEvent = TypedEvent<
  [string, BigNumber],
  BundlerExecutionEventObject
>;

export type BundlerExecutionEventFilter =
  TypedEventFilter<BundlerExecutionEvent>;

export interface PermitTransferExecutedEventObject {
  owner: string;
  numTransfers: BigNumber;
}
export type PermitTransferExecutedEvent = TypedEvent<
  [string, BigNumber],
  PermitTransferExecutedEventObject
>;

export type PermitTransferExecutedEventFilter =
  TypedEventFilter<PermitTransferExecutedEvent>;

export interface RiftDepositExecutedEventObject {
  riftExchange: string;
  depositAmount: BigNumber;
}
export type RiftDepositExecutedEvent = TypedEvent<
  [string, BigNumber],
  RiftDepositExecutedEventObject
>;

export type RiftDepositExecutedEventFilter =
  TypedEventFilter<RiftDepositExecutedEvent>;

export interface SwapExecutedEventObject {
  initialCbBTCBalance: BigNumber;
  finalCbBTCBalance: BigNumber;
  cbBTCReceived: BigNumber;
}
export type SwapExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SwapExecutedEventObject
>;

export type SwapExecutedEventFilter = TypedEventFilter<SwapExecutedEvent>;

export interface Bundler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BundlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _permitTransfer(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approveForSpender(
      amountIn: BigNumberish,
      spender: string,
      tokenIn: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cbBTC(overrides?: CallOverrides): Promise<[string]>;

    executeSwap(
      swapCalldata: BytesLike,
      owner: string,
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeSwapAndDeposit(
      amountIn: BigNumberish,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      owner: string,
      permit: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeSwapAndDepositTest(
      swapCalldata: BytesLike,
      owner: string,
      amountIn: BigNumberish,
      tokenIn: string,
      params: Types.DepositLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    permit2(overrides?: CallOverrides): Promise<[string]>;

    permitTransferAndSwapDepositTest(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    permitTransferAndSwapTest(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    riftExchange(overrides?: CallOverrides): Promise<[string]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    universalRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  _permitTransfer(
    owner: string,
    amountIn: BigNumberish,
    permitted: ISignatureTransfer.PermitTransferFromStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approveForSpender(
    amountIn: BigNumberish,
    spender: string,
    tokenIn: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cbBTC(overrides?: CallOverrides): Promise<string>;

  executeSwap(
    swapCalldata: BytesLike,
    owner: string,
    amountIn: BigNumberish,
    tokenIn: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeSwapAndDeposit(
    amountIn: BigNumberish,
    swapCalldata: BytesLike,
    params: Types.DepositLiquidityParamsStruct,
    owner: string,
    permit: ISignatureTransfer.PermitTransferFromStruct,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeSwapAndDepositTest(
    swapCalldata: BytesLike,
    owner: string,
    amountIn: BigNumberish,
    tokenIn: string,
    params: Types.DepositLiquidityParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  permit2(overrides?: CallOverrides): Promise<string>;

  permitTransferAndSwapDepositTest(
    owner: string,
    amountIn: BigNumberish,
    permitted: ISignatureTransfer.PermitTransferFromStruct,
    signature: BytesLike,
    swapCalldata: BytesLike,
    params: Types.DepositLiquidityParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  permitTransferAndSwapTest(
    owner: string,
    amountIn: BigNumberish,
    permitted: ISignatureTransfer.PermitTransferFromStruct,
    signature: BytesLike,
    swapCalldata: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  riftExchange(overrides?: CallOverrides): Promise<string>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  universalRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _permitTransfer(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approveForSpender(
      amountIn: BigNumberish,
      spender: string,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cbBTC(overrides?: CallOverrides): Promise<string>;

    executeSwap(
      swapCalldata: BytesLike,
      owner: string,
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<Types.BundlerResultStructOutput>;

    executeSwapAndDeposit(
      amountIn: BigNumberish,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      owner: string,
      permit: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<Types.BundlerResultStructOutput>;

    executeSwapAndDepositTest(
      swapCalldata: BytesLike,
      owner: string,
      amountIn: BigNumberish,
      tokenIn: string,
      params: Types.DepositLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<Types.BundlerResultStructOutput>;

    permit2(overrides?: CallOverrides): Promise<string>;

    permitTransferAndSwapDepositTest(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    permitTransferAndSwapTest(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    riftExchange(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    universalRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BundlerExecution(address,uint256)"(
      owner?: string | null,
      cbBTCReceived?: null
    ): BundlerExecutionEventFilter;
    BundlerExecution(
      owner?: string | null,
      cbBTCReceived?: null
    ): BundlerExecutionEventFilter;

    "PermitTransferExecuted(address,uint256)"(
      owner?: string | null,
      numTransfers?: null
    ): PermitTransferExecutedEventFilter;
    PermitTransferExecuted(
      owner?: string | null,
      numTransfers?: null
    ): PermitTransferExecutedEventFilter;

    "RiftDepositExecuted(address,uint256)"(
      riftExchange?: string | null,
      depositAmount?: null
    ): RiftDepositExecutedEventFilter;
    RiftDepositExecuted(
      riftExchange?: string | null,
      depositAmount?: null
    ): RiftDepositExecutedEventFilter;

    "SwapExecuted(uint256,uint256,uint256)"(
      initialCbBTCBalance?: null,
      finalCbBTCBalance?: null,
      cbBTCReceived?: null
    ): SwapExecutedEventFilter;
    SwapExecuted(
      initialCbBTCBalance?: null,
      finalCbBTCBalance?: null,
      cbBTCReceived?: null
    ): SwapExecutedEventFilter;
  };

  estimateGas: {
    _permitTransfer(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approveForSpender(
      amountIn: BigNumberish,
      spender: string,
      tokenIn: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cbBTC(overrides?: CallOverrides): Promise<BigNumber>;

    executeSwap(
      swapCalldata: BytesLike,
      owner: string,
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    executeSwapAndDeposit(
      amountIn: BigNumberish,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      owner: string,
      permit: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    executeSwapAndDepositTest(
      swapCalldata: BytesLike,
      owner: string,
      amountIn: BigNumberish,
      tokenIn: string,
      params: Types.DepositLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    permit2(overrides?: CallOverrides): Promise<BigNumber>;

    permitTransferAndSwapDepositTest(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    permitTransferAndSwapTest(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    riftExchange(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    universalRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _permitTransfer(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approveForSpender(
      amountIn: BigNumberish,
      spender: string,
      tokenIn: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cbBTC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeSwap(
      swapCalldata: BytesLike,
      owner: string,
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeSwapAndDeposit(
      amountIn: BigNumberish,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      owner: string,
      permit: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeSwapAndDepositTest(
      swapCalldata: BytesLike,
      owner: string,
      amountIn: BigNumberish,
      tokenIn: string,
      params: Types.DepositLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    permit2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitTransferAndSwapDepositTest(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike,
      params: Types.DepositLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    permitTransferAndSwapTest(
      owner: string,
      amountIn: BigNumberish,
      permitted: ISignatureTransfer.PermitTransferFromStruct,
      signature: BytesLike,
      swapCalldata: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    riftExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    universalRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
