/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ISP1VerifierGatewayInterface extends Interface {
  getFunction(
    nameOrSignature: "addRoute" | "freezeRoute" | "routes" | "verifyProof"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RouteAdded" | "RouteFrozen"): EventFragment;

  encodeFunctionData(
    functionFragment: "addRoute",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeRoute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "routes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addRoute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export namespace RouteAddedEvent {
  export type InputTuple = [selector: BytesLike, verifier: AddressLike];
  export type OutputTuple = [selector: string, verifier: string];
  export interface OutputObject {
    selector: string;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouteFrozenEvent {
  export type InputTuple = [selector: BytesLike, verifier: AddressLike];
  export type OutputTuple = [selector: string, verifier: string];
  export interface OutputObject {
    selector: string;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISP1VerifierGateway extends BaseContract {
  connect(runner?: ContractRunner | null): ISP1VerifierGateway;
  waitForDeployment(): Promise<this>;

  interface: ISP1VerifierGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRoute: TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;

  freezeRoute: TypedContractMethod<[selector: BytesLike], [void], "nonpayable">;

  routes: TypedContractMethod<
    [selector: BytesLike],
    [[string, boolean] & { verifier: string; frozen: boolean }],
    "view"
  >;

  verifyProof: TypedContractMethod<
    [programVKey: BytesLike, publicValues: BytesLike, proofBytes: BytesLike],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRoute"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "freezeRoute"
  ): TypedContractMethod<[selector: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "routes"
  ): TypedContractMethod<
    [selector: BytesLike],
    [[string, boolean] & { verifier: string; frozen: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [programVKey: BytesLike, publicValues: BytesLike, proofBytes: BytesLike],
    [void],
    "view"
  >;

  getEvent(
    key: "RouteAdded"
  ): TypedContractEvent<
    RouteAddedEvent.InputTuple,
    RouteAddedEvent.OutputTuple,
    RouteAddedEvent.OutputObject
  >;
  getEvent(
    key: "RouteFrozen"
  ): TypedContractEvent<
    RouteFrozenEvent.InputTuple,
    RouteFrozenEvent.OutputTuple,
    RouteFrozenEvent.OutputObject
  >;

  filters: {
    "RouteAdded(bytes4,address)": TypedContractEvent<
      RouteAddedEvent.InputTuple,
      RouteAddedEvent.OutputTuple,
      RouteAddedEvent.OutputObject
    >;
    RouteAdded: TypedContractEvent<
      RouteAddedEvent.InputTuple,
      RouteAddedEvent.OutputTuple,
      RouteAddedEvent.OutputObject
    >;

    "RouteFrozen(bytes4,address)": TypedContractEvent<
      RouteFrozenEvent.InputTuple,
      RouteFrozenEvent.OutputTuple,
      RouteFrozenEvent.OutputObject
    >;
    RouteFrozen: TypedContractEvent<
      RouteFrozenEvent.InputTuple,
      RouteFrozenEvent.OutputTuple,
      RouteFrozenEvent.OutputObject
    >;
  };
}
