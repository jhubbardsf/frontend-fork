/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface SP1VerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VERIFIER_HASH"
      | "VERSION"
      | "Verify"
      | "hashPublicValues"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "VERIFIER_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "Verify",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hashPublicValues",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "VERIFIER_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashPublicValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export interface SP1Verifier extends BaseContract {
  connect(runner?: ContractRunner | null): SP1Verifier;
  waitForDeployment(): Promise<this>;

  interface: SP1VerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERIFIER_HASH: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  Verify: TypedContractMethod<
    [proof: BytesLike, public_inputs: BigNumberish[]],
    [boolean],
    "view"
  >;

  hashPublicValues: TypedContractMethod<
    [publicValues: BytesLike],
    [string],
    "view"
  >;

  verifyProof: TypedContractMethod<
    [programVKey: BytesLike, publicValues: BytesLike, proofBytes: BytesLike],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERIFIER_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "Verify"
  ): TypedContractMethod<
    [proof: BytesLike, public_inputs: BigNumberish[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashPublicValues"
  ): TypedContractMethod<[publicValues: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [programVKey: BytesLike, publicValues: BytesLike, proofBytes: BytesLike],
    [void],
    "view"
  >;

  filters: {};
}
