/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface SP1VerifierInterface extends utils.Interface {
  functions: {
    "VERIFIER_HASH()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "Verify(bytes,uint256[])": FunctionFragment;
    "hashPublicValues(bytes)": FunctionFragment;
    "verifyProof(bytes32,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERIFIER_HASH"
      | "VERSION"
      | "Verify"
      | "hashPublicValues"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "VERIFIER_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "Verify",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hashPublicValues",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "VERIFIER_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashPublicValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SP1Verifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SP1VerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERIFIER_HASH(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    Verify(
      proof: BytesLike,
      public_inputs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { success: boolean }>;

    hashPublicValues(
      publicValues: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyProof(
      programVKey: BytesLike,
      publicValues: BytesLike,
      proofBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  VERIFIER_HASH(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  Verify(
    proof: BytesLike,
    public_inputs: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashPublicValues(
    publicValues: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyProof(
    programVKey: BytesLike,
    publicValues: BytesLike,
    proofBytes: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    VERIFIER_HASH(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    Verify(
      proof: BytesLike,
      public_inputs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashPublicValues(
      publicValues: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyProof(
      programVKey: BytesLike,
      publicValues: BytesLike,
      proofBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    VERIFIER_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    Verify(
      proof: BytesLike,
      public_inputs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashPublicValues(
      publicValues: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyProof(
      programVKey: BytesLike,
      publicValues: BytesLike,
      proofBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERIFIER_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Verify(
      proof: BytesLike,
      public_inputs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashPublicValues(
      publicValues: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyProof(
      programVKey: BytesLike,
      publicValues: BytesLike,
      proofBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
