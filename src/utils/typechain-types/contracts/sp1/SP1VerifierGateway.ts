/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface SP1VerifierGatewayInterface extends utils.Interface {
  functions: {
    "addRoute(address)": FunctionFragment;
    "freezeRoute(bytes4)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "routes(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyProof(bytes32,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addRoute"
      | "freezeRoute"
      | "owner"
      | "renounceOwnership"
      | "routes"
      | "transferOwnership"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addRoute", values: [string]): string;
  encodeFunctionData(
    functionFragment: "freezeRoute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "routes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addRoute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RouteAdded(bytes4,address)": EventFragment;
    "RouteFrozen(bytes4,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouteAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouteFrozen"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RouteAddedEventObject {
  selector: string;
  verifier: string;
}
export type RouteAddedEvent = TypedEvent<
  [string, string],
  RouteAddedEventObject
>;

export type RouteAddedEventFilter = TypedEventFilter<RouteAddedEvent>;

export interface RouteFrozenEventObject {
  selector: string;
  verifier: string;
}
export type RouteFrozenEvent = TypedEvent<
  [string, string],
  RouteFrozenEventObject
>;

export type RouteFrozenEventFilter = TypedEventFilter<RouteFrozenEvent>;

export interface SP1VerifierGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SP1VerifierGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRoute(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    freezeRoute(
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    routes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { verifier: string; frozen: boolean }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    verifyProof(
      programVKey: BytesLike,
      publicValues: BytesLike,
      proofBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  addRoute(
    verifier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  freezeRoute(
    selector: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  routes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { verifier: string; frozen: boolean }>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  verifyProof(
    programVKey: BytesLike,
    publicValues: BytesLike,
    proofBytes: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    addRoute(verifier: string, overrides?: CallOverrides): Promise<void>;

    freezeRoute(selector: BytesLike, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    routes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { verifier: string; frozen: boolean }>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyProof(
      programVKey: BytesLike,
      publicValues: BytesLike,
      proofBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RouteAdded(bytes4,address)"(
      selector?: null,
      verifier?: null
    ): RouteAddedEventFilter;
    RouteAdded(selector?: null, verifier?: null): RouteAddedEventFilter;

    "RouteFrozen(bytes4,address)"(
      selector?: null,
      verifier?: null
    ): RouteFrozenEventFilter;
    RouteFrozen(selector?: null, verifier?: null): RouteFrozenEventFilter;
  };

  estimateGas: {
    addRoute(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    freezeRoute(
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    routes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    verifyProof(
      programVKey: BytesLike,
      publicValues: BytesLike,
      proofBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRoute(
      verifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    freezeRoute(
      selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    routes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verifyProof(
      programVKey: BytesLike,
      publicValues: BytesLike,
      proofBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
