/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Types {
  export type BlockLeafStruct = {
    blockHash: BytesLike;
    height: BigNumberish;
    cumulativeChainwork: BigNumberish;
  };

  export type BlockLeafStructOutput = [
    blockHash: string,
    height: bigint,
    cumulativeChainwork: bigint
  ] & { blockHash: string; height: bigint; cumulativeChainwork: bigint };
}

export interface BitcoinLightClientInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkpoints"
      | "getLightClientHeight"
      | "mmrRoot"
      | "proveBlockInclusion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLightClientHeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mmrRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proveBlockInclusion",
    values: [Types.BlockLeafStruct, BytesLike[], BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLightClientHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mmrRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proveBlockInclusion",
    data: BytesLike
  ): Result;
}

export interface BitcoinLightClient extends BaseContract {
  connect(runner?: ContractRunner | null): BitcoinLightClient;
  waitForDeployment(): Promise<this>;

  interface: BitcoinLightClientInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkpoints: TypedContractMethod<
    [arg0: BytesLike],
    [
      [boolean, Types.BlockLeafStructOutput] & {
        established: boolean;
        tipBlockLeaf: Types.BlockLeafStructOutput;
      }
    ],
    "view"
  >;

  getLightClientHeight: TypedContractMethod<[], [bigint], "view">;

  mmrRoot: TypedContractMethod<[], [string], "view">;

  proveBlockInclusion: TypedContractMethod<
    [
      blockLeaf: Types.BlockLeafStruct,
      siblings: BytesLike[],
      peaks: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkpoints"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [boolean, Types.BlockLeafStructOutput] & {
        established: boolean;
        tipBlockLeaf: Types.BlockLeafStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLightClientHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mmrRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proveBlockInclusion"
  ): TypedContractMethod<
    [
      blockLeaf: Types.BlockLeafStruct,
      siblings: BytesLike[],
      peaks: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
