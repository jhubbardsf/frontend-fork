/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Types {
  export type BlockLeafStruct = {
    blockHash: BytesLike;
    height: BigNumberish;
    cumulativeChainwork: BigNumberish;
  };

  export type BlockLeafStructOutput = [string, number, BigNumber] & {
    blockHash: string;
    height: number;
    cumulativeChainwork: BigNumber;
  };
}

export interface BitcoinLightClientInterface extends utils.Interface {
  functions: {
    "checkpoints(bytes32)": FunctionFragment;
    "getLightClientHeight()": FunctionFragment;
    "mmrRoot()": FunctionFragment;
    "proveBlockInclusion((bytes32,uint32,uint256),bytes32[],bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkpoints"
      | "getLightClientHeight"
      | "mmrRoot"
      | "proveBlockInclusion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLightClientHeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mmrRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proveBlockInclusion",
    values: [Types.BlockLeafStruct, BytesLike[], BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLightClientHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mmrRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proveBlockInclusion",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BitcoinLightClient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BitcoinLightClientInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkpoints(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, Types.BlockLeafStructOutput] & {
        established: boolean;
        tipBlockLeaf: Types.BlockLeafStructOutput;
      }
    >;

    getLightClientHeight(overrides?: CallOverrides): Promise<[number]>;

    mmrRoot(overrides?: CallOverrides): Promise<[string]>;

    proveBlockInclusion(
      blockLeaf: Types.BlockLeafStruct,
      siblings: BytesLike[],
      peaks: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  checkpoints(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, Types.BlockLeafStructOutput] & {
      established: boolean;
      tipBlockLeaf: Types.BlockLeafStructOutput;
    }
  >;

  getLightClientHeight(overrides?: CallOverrides): Promise<number>;

  mmrRoot(overrides?: CallOverrides): Promise<string>;

  proveBlockInclusion(
    blockLeaf: Types.BlockLeafStruct,
    siblings: BytesLike[],
    peaks: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    checkpoints(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, Types.BlockLeafStructOutput] & {
        established: boolean;
        tipBlockLeaf: Types.BlockLeafStructOutput;
      }
    >;

    getLightClientHeight(overrides?: CallOverrides): Promise<number>;

    mmrRoot(overrides?: CallOverrides): Promise<string>;

    proveBlockInclusion(
      blockLeaf: Types.BlockLeafStruct,
      siblings: BytesLike[],
      peaks: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    checkpoints(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getLightClientHeight(overrides?: CallOverrides): Promise<BigNumber>;

    mmrRoot(overrides?: CallOverrides): Promise<BigNumber>;

    proveBlockInclusion(
      blockLeaf: Types.BlockLeafStruct,
      siblings: BytesLike[],
      peaks: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkpoints(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLightClientHeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mmrRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proveBlockInclusion(
      blockLeaf: Types.BlockLeafStruct,
      siblings: BytesLike[],
      peaks: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
