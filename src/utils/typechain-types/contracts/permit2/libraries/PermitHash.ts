/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface PermitHashInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_PERMIT_BATCH_TRANSFER_FROM_TYPEHASH"
      | "_PERMIT_BATCH_TYPEHASH"
      | "_PERMIT_BATCH_WITNESS_TRANSFER_FROM_TYPEHASH_STUB"
      | "_PERMIT_DETAILS_TYPEHASH"
      | "_PERMIT_SINGLE_TYPEHASH"
      | "_PERMIT_TRANSFER_FROM_TYPEHASH"
      | "_PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB"
      | "_TOKEN_PERMISSIONS_TYPEHASH"
      | "_TOKEN_PERMISSIONS_TYPESTRING"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_PERMIT_BATCH_TRANSFER_FROM_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_PERMIT_BATCH_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_PERMIT_BATCH_WITNESS_TRANSFER_FROM_TYPEHASH_STUB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_PERMIT_DETAILS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_PERMIT_SINGLE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_PERMIT_TRANSFER_FROM_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_TOKEN_PERMISSIONS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_TOKEN_PERMISSIONS_TYPESTRING",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_PERMIT_BATCH_TRANSFER_FROM_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_PERMIT_BATCH_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_PERMIT_BATCH_WITNESS_TRANSFER_FROM_TYPEHASH_STUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_PERMIT_DETAILS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_PERMIT_SINGLE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_PERMIT_TRANSFER_FROM_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_TOKEN_PERMISSIONS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_TOKEN_PERMISSIONS_TYPESTRING",
    data: BytesLike
  ): Result;
}

export interface PermitHash extends BaseContract {
  connect(runner?: ContractRunner | null): PermitHash;
  waitForDeployment(): Promise<this>;

  interface: PermitHashInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _PERMIT_BATCH_TRANSFER_FROM_TYPEHASH: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  _PERMIT_BATCH_TYPEHASH: TypedContractMethod<[], [string], "view">;

  _PERMIT_BATCH_WITNESS_TRANSFER_FROM_TYPEHASH_STUB: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  _PERMIT_DETAILS_TYPEHASH: TypedContractMethod<[], [string], "view">;

  _PERMIT_SINGLE_TYPEHASH: TypedContractMethod<[], [string], "view">;

  _PERMIT_TRANSFER_FROM_TYPEHASH: TypedContractMethod<[], [string], "view">;

  _PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  _TOKEN_PERMISSIONS_TYPEHASH: TypedContractMethod<[], [string], "view">;

  _TOKEN_PERMISSIONS_TYPESTRING: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_PERMIT_BATCH_TRANSFER_FROM_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_PERMIT_BATCH_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_PERMIT_BATCH_WITNESS_TRANSFER_FROM_TYPEHASH_STUB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_PERMIT_DETAILS_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_PERMIT_SINGLE_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_PERMIT_TRANSFER_FROM_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_TOKEN_PERMISSIONS_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_TOKEN_PERMISSIONS_TYPESTRING"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
