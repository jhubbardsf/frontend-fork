/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  BitcoinLightClient,
  BitcoinLightClientInterface,
} from "../../contracts/BitcoinLightClient";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "checkpoints",
    outputs: [
      {
        internalType: "bool",
        name: "established",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "height",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "cumulativeChainwork",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BlockLeaf",
        name: "tipBlockLeaf",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLightClientHeight",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mmrRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "height",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "cumulativeChainwork",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BlockLeaf",
        name: "blockLeaf",
        type: "tuple",
      },
      {
        internalType: "bytes32[]",
        name: "siblings",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "peaks",
        type: "bytes32[]",
      },
    ],
    name: "proveBlockInclusion",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class BitcoinLightClient__factory {
  static readonly abi = _abi;
  static createInterface(): BitcoinLightClientInterface {
    return new Interface(_abi) as BitcoinLightClientInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BitcoinLightClient {
    return new Contract(address, _abi, runner) as unknown as BitcoinLightClient;
  }
}
