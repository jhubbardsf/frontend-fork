/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IBundler,
  IBundlerInterface,
} from "../../../contracts/interfaces/IBundler";

const _abi = [
  {
    inputs: [],
    name: "cbBTC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "executeSwapAndDeposit",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "initialCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cbBTCReceived",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BundlerResult",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "riftExchange",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IBundler__factory {
  static readonly abi = _abi;
  static createInterface(): IBundlerInterface {
    return new utils.Interface(_abi) as IBundlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBundler {
    return new Contract(address, _abi, signerOrProvider) as IBundler;
  }
}
