/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IRiftExchange,
  IRiftExchangeInterface,
} from "../../../contracts/interfaces/IRiftExchange";

const _abi = [
  {
    inputs: [],
    name: "CIRCUIT_VERIFICATION_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DEPOSIT_TOKEN",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEE_ROUTER_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TOKEN_DECIMALS",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VERIFIER",
    outputs: [
      {
        internalType: "contract ISP1Verifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accumulatedFeeBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "depositLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "depositOwnerAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "depositAmount",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "expectedSats",
                type: "uint64",
              },
              {
                internalType: "bytes22",
                name: "btcPayoutScriptPubKey",
                type: "bytes22",
              },
              {
                internalType: "bytes32",
                name: "depositSalt",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                components: [
                  {
                    internalType: "bytes32",
                    name: "blockHash",
                    type: "bytes32",
                  },
                  {
                    internalType: "uint32",
                    name: "height",
                    type: "uint32",
                  },
                  {
                    internalType: "uint256",
                    name: "cumulativeChainwork",
                    type: "uint256",
                  },
                ],
                internalType: "struct Types.BlockLeaf",
                name: "safeBlockLeaf",
                type: "tuple",
              },
              {
                internalType: "bytes32[]",
                name: "safeBlockSiblings",
                type: "bytes32[]",
              },
              {
                internalType: "bytes32[]",
                name: "safeBlockPeaks",
                type: "bytes32[]",
              },
            ],
            internalType: "struct Types.DepositLiquidityParams",
            name: "depositParams",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "vaultIndex",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "depositTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "depositAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositFee",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "expectedSats",
                type: "uint64",
              },
              {
                internalType: "bytes22",
                name: "btcPayoutScriptPubKey",
                type: "bytes22",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "ownerAddress",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                internalType: "uint64",
                name: "attestedBitcoinBlockHeight",
                type: "uint64",
              },
            ],
            internalType: "struct Types.DepositVault",
            name: "overwriteVault",
            type: "tuple",
          },
        ],
        internalType: "struct Types.DepositLiquidityWithOverwriteParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "depositLiquidityWithOverwrite",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLightClientHeight",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "swapIndex",
        type: "uint256",
      },
    ],
    name: "getSwapCommitment",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSwapCommitmentsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultIndex",
        type: "uint256",
      },
    ],
    name: "getVaultCommitment",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVaultCommitmentsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "payoutToFeeRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "swapIndex",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "depositVaultCommitment",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "swapBitcoinBlockHash",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                internalType: "uint64",
                name: "liquidityUnlockTimestamp",
                type: "uint64",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "totalSwapFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalSwapOutput",
                type: "uint256",
              },
              {
                internalType: "enum Types.SwapState",
                name: "state",
                type: "uint8",
              },
            ],
            internalType: "struct Types.ProposedSwap",
            name: "swap",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "swapBlockChainwork",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "swapBlockHeight",
            type: "uint32",
          },
          {
            internalType: "bytes32[]",
            name: "bitcoinSwapBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "bitcoinSwapBlockPeaks",
            type: "bytes32[]",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "vaultIndex",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "depositTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "depositAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositFee",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "expectedSats",
                type: "uint64",
              },
              {
                internalType: "bytes22",
                name: "btcPayoutScriptPubKey",
                type: "bytes22",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "ownerAddress",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                internalType: "uint64",
                name: "attestedBitcoinBlockHeight",
                type: "uint64",
              },
            ],
            internalType: "struct Types.DepositVault",
            name: "utilizedVault",
            type: "tuple",
          },
          {
            internalType: "uint32",
            name: "tipBlockHeight",
            type: "uint32",
          },
        ],
        internalType: "struct Types.ReleaseLiquidityParams[]",
        name: "paramsArray",
        type: "tuple[]",
      },
    ],
    name: "releaseLiquidityBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "swapBitcoinTxid",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "vaultIndex",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "depositTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "depositAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositFee",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "expectedSats",
                type: "uint64",
              },
              {
                internalType: "bytes22",
                name: "btcPayoutScriptPubKey",
                type: "bytes22",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "ownerAddress",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                internalType: "uint64",
                name: "attestedBitcoinBlockHeight",
                type: "uint64",
              },
            ],
            internalType: "struct Types.DepositVault",
            name: "vault",
            type: "tuple",
          },
          {
            internalType: "enum Types.StorageStrategy",
            name: "storageStrategy",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "localOverwriteIndex",
            type: "uint16",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "swapBitcoinBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "swapBitcoinBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "swapBitcoinBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.SubmitSwapProofParams[]",
        name: "swapParams",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "swapIndex",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "depositVaultCommitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "swapBitcoinBlockHash",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "liquidityUnlockTimestamp",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalSwapFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSwapOutput",
            type: "uint256",
          },
          {
            internalType: "enum Types.SwapState",
            name: "state",
            type: "uint8",
          },
        ],
        internalType: "struct Types.ProposedSwap[]",
        name: "overwriteSwaps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "submitBatchSwapProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "swapBitcoinTxid",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "vaultIndex",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "depositTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "depositAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositFee",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "expectedSats",
                type: "uint64",
              },
              {
                internalType: "bytes22",
                name: "btcPayoutScriptPubKey",
                type: "bytes22",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "ownerAddress",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                internalType: "uint64",
                name: "attestedBitcoinBlockHeight",
                type: "uint64",
              },
            ],
            internalType: "struct Types.DepositVault",
            name: "vault",
            type: "tuple",
          },
          {
            internalType: "enum Types.StorageStrategy",
            name: "storageStrategy",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "localOverwriteIndex",
            type: "uint16",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "swapBitcoinBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "swapBitcoinBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "swapBitcoinBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.SubmitSwapProofParams[]",
        name: "swapParams",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "priorMmrRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "newMmrRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "compressedBlockLeaves",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "tipBlockLeaf",
            type: "tuple",
          },
        ],
        internalType: "struct Types.BlockProofParams",
        name: "blockProofParams",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "swapIndex",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "depositVaultCommitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "swapBitcoinBlockHash",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "liquidityUnlockTimestamp",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalSwapFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSwapOutput",
            type: "uint256",
          },
          {
            internalType: "enum Types.SwapState",
            name: "state",
            type: "uint8",
          },
        ],
        internalType: "struct Types.ProposedSwap[]",
        name: "overwriteSwaps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "submitBatchSwapProofWithLightClientUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "swapCommitments",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "priorMmrRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "newMmrRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "compressedBlockLeaves",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "tipBlockLeaf",
            type: "tuple",
          },
        ],
        internalType: "struct Types.BlockProofParams",
        name: "blockProofParams",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "updateLightClient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "vaultCommitments",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "vaultIndex",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "depositTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "depositFee",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "ownerAddress",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "attestedBitcoinBlockHeight",
            type: "uint64",
          },
        ],
        internalType: "struct Types.DepositVault",
        name: "vault",
        type: "tuple",
      },
    ],
    name: "withdrawLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IRiftExchange__factory {
  static readonly abi = _abi;
  static createInterface(): IRiftExchangeInterface {
    return new utils.Interface(_abi) as IRiftExchangeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IRiftExchange {
    return new Contract(address, _abi, signerOrProvider) as IRiftExchange;
  }
}
