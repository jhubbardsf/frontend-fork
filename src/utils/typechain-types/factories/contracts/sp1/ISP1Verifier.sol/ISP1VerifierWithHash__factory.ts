/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISP1VerifierWithHash,
  ISP1VerifierWithHashInterface,
} from "../../../../contracts/sp1/ISP1Verifier.sol/ISP1VerifierWithHash";

const _abi = [
  {
    inputs: [],
    name: "VERIFIER_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "programVKey",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "publicValues",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proofBytes",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ISP1VerifierWithHash__factory {
  static readonly abi = _abi;
  static createInterface(): ISP1VerifierWithHashInterface {
    return new Interface(_abi) as ISP1VerifierWithHashInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ISP1VerifierWithHash {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ISP1VerifierWithHash;
  }
}
