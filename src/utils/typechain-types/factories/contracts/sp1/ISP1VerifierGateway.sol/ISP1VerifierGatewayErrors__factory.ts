/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISP1VerifierGatewayErrors,
  ISP1VerifierGatewayErrorsInterface,
} from "../../../../contracts/sp1/ISP1VerifierGateway.sol/ISP1VerifierGatewayErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "verifier",
        type: "address",
      },
    ],
    name: "RouteAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "RouteIsFrozen",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "RouteNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "SelectorCannotBeZero",
    type: "error",
  },
] as const;

export class ISP1VerifierGatewayErrors__factory {
  static readonly abi = _abi;
  static createInterface(): ISP1VerifierGatewayErrorsInterface {
    return new Interface(_abi) as ISP1VerifierGatewayErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ISP1VerifierGatewayErrors {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ISP1VerifierGatewayErrors;
  }
}
