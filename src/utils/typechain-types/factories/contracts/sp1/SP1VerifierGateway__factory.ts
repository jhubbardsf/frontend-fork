/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SP1VerifierGateway,
  SP1VerifierGatewayInterface,
} from "../../../contracts/sp1/SP1VerifierGateway";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "verifier",
        type: "address",
      },
    ],
    name: "RouteAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "RouteIsFrozen",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "RouteNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "SelectorCannotBeZero",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "address",
        name: "verifier",
        type: "address",
      },
    ],
    name: "RouteAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "address",
        name: "verifier",
        type: "address",
      },
    ],
    name: "RouteFrozen",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "verifier",
        type: "address",
      },
    ],
    name: "addRoute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "freezeRoute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "routes",
    outputs: [
      {
        internalType: "address",
        name: "verifier",
        type: "address",
      },
      {
        internalType: "bool",
        name: "frozen",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "programVKey",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "publicValues",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proofBytes",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803460bc57601f610b6838819003918201601f19168301916001600160401b0383118484101760c15780849260209460405283398101031260bc57516001600160a01b0381169081900360bc57801560a657600080546001600160a01b031981168317825560405192916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3610a9090816100d88239f35b631e4fbdf760e01b600052600060045260246000fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816341493c60146106cd5750806351c7094f14610637578063715018a61461059b578063814856f4146103f35780638c95ff1e146101b45780638da5cb5b146101635763f2fde38b1461006e57600080fd5b346101605760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101605760043573ffffffffffffffffffffffffffffffffffffffff811680910361015e576100c6610a0b565b80156101325773ffffffffffffffffffffffffffffffffffffffff8254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b6024827f1e4fbdf700000000000000000000000000000000000000000000000000000000815280600452fd5b505b80fd5b503461016057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101605773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b50346101605760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610160576004359073ffffffffffffffffffffffffffffffffffffffff82169182810361015e5761020f610a0b565b6040517f2a510436000000000000000000000000000000000000000000000000000000008152602081600481875afa80156103e8578390610392575b7fffffffff00000000000000000000000000000000000000000000000000000000915016801561036a5780835260016020526040832073ffffffffffffffffffffffffffffffffffffffff815416948561033e5781547fffffffffffffffffffffffff000000000000000000000000000000000000000016179055604080517fffffffff00000000000000000000000000000000000000000000000000000000909216825273ffffffffffffffffffffffffffffffffffffffff90921660208201529192507fcb5cc54fa0fda41744197b286ab4135aec7c322cace32c4f55da723d2eb8eee69190819081015b0390a180f35b602485877f2b87e797000000000000000000000000000000000000000000000000000000008252600452fd5b6004837f20acd28b000000000000000000000000000000000000000000000000000000008152fd5b506020813d6020116103e0575b816103ac6020938361095c565b810103126103dc577fffffffff00000000000000000000000000000000000000000000000000000000905161024b565b8280fd5b3d915061039f565b6040513d85823e3d90fd5b50346101605760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016057600435907fffffffff00000000000000000000000000000000000000000000000000000000821680830361015e57610459610a0b565b8082526001602052604082209283549373ffffffffffffffffffffffffffffffffffffffff85169283156105705760ff8660a01c166105455750740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff7f63ad2363b183cb8bb562b9590c5b4428e2a566260df053db156576d3d171438d9596161790556103386040519283928390929173ffffffffffffffffffffffffffffffffffffffff6020917fffffffff00000000000000000000000000000000000000000000000000000000604085019616845216910152565b7febf10823000000000000000000000000000000000000000000000000000000008552600452602484fd5b7ff208777e000000000000000000000000000000000000000000000000000000008552600452602484fd5b503461016057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610160576105d2610a0b565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101605760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610160576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361015e57604082819281526001602052205460ff82519173ffffffffffffffffffffffffffffffffffffffff8116835260a01c1615156020820152f35b82346101605760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101605760243567ffffffffffffffff811161015e5761071d903690600401610929565b60443567ffffffffffffffff81116109255761073d903690600401610929565b9190826004116108c9577fffffffff00000000000000000000000000000000000000000000000000000000813516938486526001602052604086206040880188811067ffffffffffffffff8211176108f8576040525460ff73ffffffffffffffffffffffffffffffffffffffff821691828a5260a01c161515908160208a0152156000146107f157602487877ff208777e000000000000000000000000000000000000000000000000000000008252600452fd5b948796956108cd575073ffffffffffffffffffffffffffffffffffffffff8596959495511690813b156108c957849361089d61086d94604051988996879586957f41493c6000000000000000000000000000000000000000000000000000000000875260043560048801526060602488015260648701916109cc565b917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8584030160448601526109cc565b03915afa80156108bc576108ae5780f35b6108b79161095c565b818180f35b50604051903d90823e3d90fd5b8480fd5b7febf10823000000000000000000000000000000000000000000000000000000008652600452602485fd5b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8380fd5b9181601f840112156109575782359167ffffffffffffffff8311610957576020838186019501011161095757565b600080fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761099d57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b73ffffffffffffffffffffffffffffffffffffffff600054163303610a2c57565b7f118cdaa7000000000000000000000000000000000000000000000000000000006000523360045260246000fdfea2646970667358221220436f3e452cacb767293b684dac0b042d242b220704e5b8ed0d1f65091d2215ea64736f6c634300081c0033";

type SP1VerifierGatewayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SP1VerifierGatewayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SP1VerifierGateway__factory extends ContractFactory {
  constructor(...args: SP1VerifierGatewayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialOwner, overrides || {});
  }
  override deploy(
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialOwner, overrides || {}) as Promise<
      SP1VerifierGateway & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SP1VerifierGateway__factory {
    return super.connect(runner) as SP1VerifierGateway__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SP1VerifierGatewayInterface {
    return new Interface(_abi) as SP1VerifierGatewayInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SP1VerifierGateway {
    return new Contract(address, _abi, runner) as unknown as SP1VerifierGateway;
  }
}
