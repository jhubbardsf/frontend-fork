/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SP1Verifier,
  SP1VerifierInterface,
} from "../../../../contracts/sp1/SP1VerifierGroth16.sol/SP1Verifier";

const _abi = [
  {
    inputs: [],
    name: "InvalidProof",
    type: "error",
  },
  {
    inputs: [],
    name: "ProofInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "PublicInputNotInField",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "received",
        type: "bytes4",
      },
      {
        internalType: "bytes4",
        name: "expected",
        type: "bytes4",
      },
    ],
    name: "WrongVerifierSelector",
    type: "error",
  },
  {
    inputs: [],
    name: "VERIFIER_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[8]",
        name: "proof",
        type: "uint256[8]",
      },
      {
        internalType: "uint256[2]",
        name: "input",
        type: "uint256[2]",
      },
    ],
    name: "Verify",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[8]",
        name: "proof",
        type: "uint256[8]",
      },
    ],
    name: "compressProof",
    outputs: [
      {
        internalType: "uint256[4]",
        name: "compressed",
        type: "uint256[4]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "publicValues",
        type: "bytes",
      },
    ],
    name: "hashPublicValues",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[4]",
        name: "compressedProof",
        type: "uint256[4]",
      },
      {
        internalType: "uint256[2]",
        name: "input",
        type: "uint256[2]",
      },
    ],
    name: "verifyCompressedProof",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "programVKey",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "publicValues",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proofBytes",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type SP1VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SP1VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SP1Verifier__factory extends ContractFactory {
  constructor(...args: SP1VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<SP1Verifier> {
    return super.deploy(overrides || {}) as Promise<SP1Verifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SP1Verifier {
    return super.attach(address) as SP1Verifier;
  }
  override connect(signer: Signer): SP1Verifier__factory {
    return super.connect(signer) as SP1Verifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SP1VerifierInterface {
    return new utils.Interface(_abi) as SP1VerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SP1Verifier {
    return new Contract(address, _abi, signerOrProvider) as SP1Verifier;
  }
}
