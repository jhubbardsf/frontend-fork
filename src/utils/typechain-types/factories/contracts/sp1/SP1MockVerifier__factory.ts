/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SP1MockVerifier,
  SP1MockVerifierInterface,
} from "../../../contracts/sp1/SP1MockVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proofBytes",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460155761012a908161001b8239f35b600080fdfe60806040526004361015601157600080fd5b60003560e01c6341493c6014602557600080fd5b3460c45760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260c45760243567ffffffffffffffff811160c457606f90369060040160c9565b505060443567ffffffffffffffff811160c457608e90369060040160c9565b9050609557005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600080fd5b9181601f8401121560c45782359167ffffffffffffffff831160c4576020838186019501011160c45756fea26469706673582212206df58331de3fbf88b4306ea71a89f81e995fa866fa78247a50d0d998e9e781b264736f6c634300081c0033";

type SP1MockVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SP1MockVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SP1MockVerifier__factory extends ContractFactory {
  constructor(...args: SP1MockVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SP1MockVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SP1MockVerifier__factory {
    return super.connect(runner) as SP1MockVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SP1MockVerifierInterface {
    return new Interface(_abi) as SP1MockVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SP1MockVerifier {
    return new Contract(address, _abi, runner) as unknown as SP1MockVerifier;
  }
}
