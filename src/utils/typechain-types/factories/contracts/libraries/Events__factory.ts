/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Events,
  EventsInterface,
} from "../../../contracts/libraries/Events";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "priorMmrRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "newMmrRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "compressedBlockLeaves",
        type: "bytes",
      },
    ],
    name: "BitcoinLightClientUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    name: "BundlerExecution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "numTransfers",
        type: "uint256",
      },
    ],
    name: "PermitTransferExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "riftExchange",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "RiftDepositExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "initialCbBTCBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "finalCbBTCBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "swapIndex",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "depositVaultCommitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "swapBitcoinBlockHash",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "liquidityUnlockTimestamp",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalSwapFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSwapOutput",
            type: "uint256",
          },
          {
            internalType: "enum Types.SwapState",
            name: "state",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct Types.ProposedSwap[]",
        name: "swaps",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "enum Types.SwapUpdateContext",
        name: "context",
        type: "uint8",
      },
    ],
    name: "SwapsUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "vaultIndex",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "depositTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "depositFee",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "ownerAddress",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "attestedBitcoinBlockHeight",
            type: "uint64",
          },
        ],
        indexed: false,
        internalType: "struct Types.DepositVault[]",
        name: "vaults",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "enum Types.VaultUpdateContext",
        name: "context",
        type: "uint8",
      },
    ],
    name: "VaultsUpdated",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122075e54e512c633f99b2d8e6c6a7dfeaca1f7b2d372425e19d9332ba62034f3eab64736f6c634300081c0033";

type EventsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EventsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Events__factory extends ContractFactory {
  constructor(...args: EventsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Events & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Events__factory {
    return super.connect(runner) as Events__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EventsInterface {
    return new Interface(_abi) as EventsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Events {
    return new Contract(address, _abi, runner) as unknown as Events;
  }
}
