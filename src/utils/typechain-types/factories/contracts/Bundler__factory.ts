/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Bundler, BundlerInterface } from "../../contracts/Bundler";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_swapRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_riftExchange",
        type: "address",
      },
      {
        internalType: "address",
        name: "_cbBTC",
        type: "address",
      },
      {
        internalType: "address",
        name: "_permit2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_universalRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "ApprovalError",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalToRiftExchangeFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapExecutionFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    name: "BundlerExecution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "numTransfers",
        type: "uint256",
      },
    ],
    name: "PermitTransferExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "riftExchange",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "RiftDepositExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "initialCbBTCBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "finalCbBTCBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permitted",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "_permitTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
    ],
    name: "approveForSpender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cbBTC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
    ],
    name: "executeSwap",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "initialCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cbBTCReceived",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BundlerResult",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "executeSwapAndDeposit",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "initialCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cbBTCReceived",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BundlerResult",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeSwapAndDepositTest",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "initialCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cbBTCReceived",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BundlerResult",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permitted",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "permitTransferAndSwapDepositTest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permitted",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
    ],
    name: "permitTransferAndSwapTest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "riftExchange",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "universalRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61012080604052346101c65760a08161239d803803809161002082856101cb565b8339810103126101c65761003381610204565b9061004060208201610204565b9161004d60408301610204565b91610066608061005f60608401610204565b9201610204565b60809290925260a084905260c083905260e0526101005260405163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529116906020816044816000865af19081156101ba57600091610178575b501561016457604051612184908161021982396080518181816101e301528181610d4801528181610dc401528181611250015281816112f60152611de0015260a0518181816103a201528181610ed9015261177f015260c05181818161016601528181610c9d015281816116a10152611d51015260e051818181610ad901528181610c1401528181611539015281816118800152611b8b015261010051816117100152f35b6345f56ca760e11b60005260045260246000fd5b6020813d6020116101b2575b81610191602093836101cb565b810103126101ae57519081151582036101ab5750386100bf565b80fd5b5080fd5b3d9150610184565b6040513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176101ee57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101c65756fe608080604052600436101561001357600080fd5b600090813560e01c90816312261ee71461183657508063153df89e146117a35780631c919e101461173457806335a9e4df146116c55780635ad182d3146116565780636ca79b93146114365780639a9bf481146113a6578063b5ba5e7214611274578063c31c9c0714611205578063e6cfccd314610887578063f1180511146107b35763f2462740146100a557600080fd5b60a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a5760043567ffffffffffffffff8111610658576100ef90369060040161192e565b6100f76118ea565b906101006118c7565b936084359067ffffffffffffffff821161064a5781600401956101807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc84360301126106585761014e611c74565b5073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001693604051967f70a08231000000000000000000000000000000000000000000000000000000008852306004890152602088602481895afa9788156107a8578498610774575b5073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000093166040517f095ea7b30000000000000000000000000000000000000000000000000000000081526020818061026160443589600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b038189865af190811561076957869161074a575b501561071f575091818493849360405192839283378101848152039134905af161029d611c93565b50156106f757604051927f70a08231000000000000000000000000000000000000000000000000000000008452306004850152602084602481845afa93841561064d5782946106be575b506102f28685611cf1565b947f4d3257edb95914b701655f9bf4b58e4b422017a7b94dad03a20dae00f4b1cbb76040518061033589898c846040919493926060820195825260208201520152565b0390a17f5798042aa6f4acc5fdf6fc5c6c8a1f092d35373907c7bf9ac07a40c40a299530602073ffffffffffffffffffffffffffffffffffffffff604051938985521692a26040517f095ea7b30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8116600483015260248201879052916020908290604490829087905af19081156106b3578391610684575b501561065c5773ffffffffffffffffffffffffffffffffffffffff1691823b1561065857816105b091604051809381927f48678e060000000000000000000000000000000000000000000000000000000083526020600484015273ffffffffffffffffffffffffffffffffffffffff6104798d61190d565b16602484015273ffffffffffffffffffffffffffffffffffffffff6104a06024830161190d565b16604484015261057f60448201359c8d606486015267ffffffffffffffff6104ca60648501611a04565b1660848601527fffffffffffffffffffffffffffffffffffffffffffff000000000000000000006104fd60848501611a19565b1660a486015260a483013560c486015260ff61051b60c48501611a46565b1660e486015260e483013561010486015263ffffffff61053e6101048501611a54565b166101248601526101248301356101448601526101646105776105656101448601846120be565b610180848a01526101a4890191612111565b9301906120be565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc85840301610184860152612111565b038183875af1801561064d57610635575b50507fa31e8bc1bdee2d6252cc2eaffcfd97de92d288a10a0c3699f5b066a6697a33b5602061063196604051908152a2604051926105fe8461195c565b83526020830152604082015260405191829182919091604080606083019480518452602081015160208501520151910152565b0390f35b6106408280926119c3565b61064a57806105c1565b80fd5b6040513d84823e3d90fd5b5080fd5b6004827f34f236ee000000000000000000000000000000000000000000000000000000008152fd5b6106a6915060203d6020116106ac575b61069e81836119c3565b81019061204f565b38610401565b503d610694565b6040513d85823e3d90fd5b9093506020813d6020116106ef575b816106da602093836119c3565b810103126106ea575192386102e7565b600080fd5b3d91506106cd565b807f7055054e0000000000000000000000000000000000000000000000000000000060049252fd5b7f8bead94e000000000000000000000000000000000000000000000000000000008552600452602484fd5b610763915060203d6020116106ac5761069e81836119c3565b38610275565b6040513d88823e3d90fd5b9097506020813d6020116107a0575b81610790602093836119c3565b810103126106ea575196386101cb565b3d9150610783565b6040513d86823e3d90fd5b506101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a576107e76118a4565b6024359060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc3601126108835760c43567ffffffffffffffff811161087f5761083590369060040161192e565b92909160e4359367ffffffffffffffff851161087b5761086961085f61087796369060040161192e565b9290958585611b71565b610871612067565b93611d2d565b5080f35b8580fd5b8380fd5b8280fd5b506101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a576108bb6118a4565b60807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc3601126106585760c43567ffffffffffffffff81116108835761090590369060040161192e565b909160e43567ffffffffffffffff81116111cc5761092790369060040161192e565b9092610104359467ffffffffffffffff861161120157853603956101807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8801126111fd5760405196610140880188811067ffffffffffffffff8211176111d0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1c8a959493926060926040526109c08460040161190d565b8b526109ce6024850161190d565b60208c0152604484013560408c01526109e960648501611a04565b838c01526109f960848501611a19565b60808c015260a484013560a08c0152610a1460c48501611a46565b60c08c0152011261087f57604051610a2b8161195c565b60e48201358152610a3f6101048301611a54565b6020820152610124820135604082015260e089015261014481013567ffffffffffffffff81116111cc57610a799060043691840101611a65565b6101008901526101648101359067ffffffffffffffff82116111cc576004610aa49236920101611a65565b61012088015260405190610ab7826119a7565b308252602435602083015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561087f57604051927f30f28b7a0000000000000000000000000000000000000000000000000000000084526044359073ffffffffffffffffffffffffffffffffffffffff8216820361087b5760047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83889694879560208c9a73ffffffffffffffffffffffffffffffffffffffff6101209a16888a015260643560248a015260843560448a015260a43560648a015273ffffffffffffffffffffffffffffffffffffffff81511660848a0152015160a48801523360c488015261010060e48801528161010488015261012487013787868583880101015201168201010301818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1801561064d576111b7575b5050604051600181527fa3af27cbdd5938c0f2e793fee942c0b3ec8ea9384af488c16a446d87cd5d7bf6602073ffffffffffffffffffffffffffffffffffffffff851692a273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690604051937f70a08231000000000000000000000000000000000000000000000000000000008552306004860152602085602481865afa9485156111ac578795611178575b5073ffffffffffffffffffffffffffffffffffffffff610d20612067565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16600482015260248035908201529116906020816044818c865af190811561116d57899161114e575b50156111235750818792918392604051928392833781018381520390347f00000000000000000000000000000000000000000000000000000000000000005af1610ded611c93565b50156110fb57906020602492604051938480927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa9182156110f05785926110a8575b5073ffffffffffffffffffffffffffffffffffffffff6020917f4d3257edb95914b701655f9bf4b58e4b422017a7b94dad03a20dae00f4b1cbb784610e9f877f5798042aa6f4acc5fdf6fc5c6c8a1f092d35373907c7bf9ac07a40c40a29953097611cf1565b60408051988952602089019290925290870181905295606090a16040519485521692a273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b1561088357826040517f48678e060000000000000000000000000000000000000000000000000000000081526020600482015273ffffffffffffffffffffffffffffffffffffffff835116602482015273ffffffffffffffffffffffffffffffffffffffff60208401511660448201526040830151606482015267ffffffffffffffff60608401511660848201527fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000060808401511660a482015260a083015160c482015260ff60c08401511660e4820152604060e0840151805161010484015263ffffffff602082015116610124840152015161014482015281818061104e6110186101008801516101806101648501526101a484019061208a565b6101208801517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8483030161018485015261208a565b038183885af1801561064d57611093575b5050602060407fa31e8bc1bdee2d6252cc2eaffcfd97de92d288a10a0c3699f5b066a6697a33b5920151604051908152a280f35b8161109d916119c3565b61088357823861105f565b91506020823d6020116110e8575b816110c3602093836119c3565b810103126106ea5790519073ffffffffffffffffffffffffffffffffffffffff610e39565b3d91506110b6565b6040513d87823e3d90fd5b6004857f7055054e000000000000000000000000000000000000000000000000000000008152fd5b7f8bead94e000000000000000000000000000000000000000000000000000000008852600452602487fd5b611167915060203d6020116106ac5761069e81836119c3565b38610da5565b6040513d8b823e3d90fd5b9094506020813d6020116111a4575b81611194602093836119c3565b810103126106ea57519338610d02565b3d9150611187565b6040513d89823e3d90fd5b816111c1916119c3565b6111cc578438610c41565b8480fd5b60248a7f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8780fd5b8680fd5b503461064a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461064a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a576112ac6118ea565b5060443573ffffffffffffffffffffffffffffffffffffffff8116809103610658576040517f095ea7b30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1660048083019190915235602482015260208160448186865af19081156106b3578391611387575b501561135c575080f35b7f8bead94e000000000000000000000000000000000000000000000000000000008252600452602490fd5b6113a0915060203d6020116106ac5761069e81836119c3565b38611352565b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a576004359067ffffffffffffffff821161064a576106316114126113f7366004860161192e565b906114006118ea565b6114086118c7565b9260443592611d2d565b60408051825181526020808401519082015291810151908201529081906060820190565b506101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a5760243567ffffffffffffffff81116106585761148290369060040161192e565b505060443567ffffffffffffffff8111610658577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc610180913603011261064a576114cb6118c7565b60807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c360112610658576101043567ffffffffffffffff81116108835761151690369060040161192e565b611521929192611c74565b9273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690604051611566816119a7565b3081526004356020820152823b156112015791869391846115bc9894604051998a95869485937f30f28b7a0000000000000000000000000000000000000000000000000000000085523390608460048701611acd565b03925af19384156116495761063194611639575b50507fa3af27cbdd5938c0f2e793fee942c0b3ec8ea9384af488c16a446d87cd5d7bf6602073ffffffffffffffffffffffffffffffffffffffff60405193600185521692a260408051825181526020808401519082015291810151908201529081906060820190565b81611643916119c3565b386115d0565b50604051903d90823e3d90fd5b503461064a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461064a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461064a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461064a5760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261064a576117db6118a4565b60807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc3601126106585760c4359067ffffffffffffffff82116108835761182961183392369060040161192e565b9160243590611b71565b80f35b90503461065857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106585760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036106ea57565b6064359073ffffffffffffffffffffffffffffffffffffffff821682036106ea57565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036106ea57565b359073ffffffffffffffffffffffffffffffffffffffff821682036106ea57565b9181601f840112156106ea5782359167ffffffffffffffff83116106ea57602083818601950101116106ea57565b6060810190811067ffffffffffffffff82111761197857604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761197857604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761197857604052565b359067ffffffffffffffff821682036106ea57565b35907fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000821682036106ea57565b359060ff821682036106ea57565b359063ffffffff821682036106ea57565b9080601f830112156106ea5781359167ffffffffffffffff8311611978578260051b9060405193611a9960208401866119c3565b84526020808501928201019283116106ea57602001905b828210611abd5750505090565b8135815260209182019101611ab0565b93946101209573ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0956020601f966060869785611b1d8261190d565b168c5283810135848d0152604081013560408d0152013560608b01528381511660808b0152015160a08901521660c087015261010060e0870152816101008701528686013760008582860101520116010190565b92909173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169060009360405190611bbc826119a7565b3082526020820152823b156111cc5791611c0e9391858094604051968795869485937f30f28b7a0000000000000000000000000000000000000000000000000000000085523390604460048701611acd565b03925af1801561064d57611c64575b50507fa3af27cbdd5938c0f2e793fee942c0b3ec8ea9384af488c16a446d87cd5d7bf6602073ffffffffffffffffffffffffffffffffffffffff60405193600185521692a2565b81611c6e916119c3565b38611c1d565b60405190611c818261195c565b60006040838281528260208201520152565b3d15611cec573d9067ffffffffffffffff82116119785760405191611ce060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601846119c3565b82523d6000602084013e565b606090565b91908203918211611cfe57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91929390611d39611c74565b5073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001692604051957f70a08231000000000000000000000000000000000000000000000000000000008752306004880152602087602481885afa968715611f995760009761201b575b506040517f095ea7b30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8181166004840152602483019390935294909116906020816044816000865af1908115611f9957600091611ffc575b5015611fcf57509181600093849360405192839283378101848152039134905af1611e6c611c93565b5015611fa5576020602491604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa908115611f9957600091611f67575b50611ec38382611cf1565b917f4d3257edb95914b701655f9bf4b58e4b422017a7b94dad03a20dae00f4b1cbb760405180611f06868689846040919493926060820195825260208201520152565b0390a17f5798042aa6f4acc5fdf6fc5c6c8a1f092d35373907c7bf9ac07a40c40a299530602073ffffffffffffffffffffffffffffffffffffffff604051938685521692a260405192611f588461195c565b83526020830152604082015290565b906020823d602011611f91575b81611f81602093836119c3565b8101031261064a57505138611eb8565b3d9150611f74565b6040513d6000823e3d90fd5b7f7055054e0000000000000000000000000000000000000000000000000000000060005260046000fd5b7f8bead94e0000000000000000000000000000000000000000000000000000000060005260045260246000fd5b612015915060203d6020116106ac5761069e81836119c3565b38611e43565b90966020823d602011612047575b81612036602093836119c3565b8101031261064a5750519538611db7565b3d9150612029565b908160209103126106ea575180151581036106ea5790565b60443573ffffffffffffffffffffffffffffffffffffffff811681036106ea5790565b906020808351928381520192019060005b8181106120a85750505090565b825184526020938401939092019160010161209b565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156106ea57016020813591019167ffffffffffffffff82116106ea578160051b360383136106ea57565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116106ea5760209260051b80928483013701019056fea2646970667358221220f6024b37de45a36bd7aeb226b058bd8ca675d035fcc9ee925be5eb1480fd07a764736f6c634300081c0033";

type BundlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BundlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bundler__factory extends ContractFactory {
  constructor(...args: BundlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _swapRouter: AddressLike,
    _riftExchange: AddressLike,
    _cbBTC: AddressLike,
    _permit2: AddressLike,
    _universalRouter: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _swapRouter,
      _riftExchange,
      _cbBTC,
      _permit2,
      _universalRouter,
      overrides || {}
    );
  }
  override deploy(
    _swapRouter: AddressLike,
    _riftExchange: AddressLike,
    _cbBTC: AddressLike,
    _permit2: AddressLike,
    _universalRouter: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _swapRouter,
      _riftExchange,
      _cbBTC,
      _permit2,
      _universalRouter,
      overrides || {}
    ) as Promise<
      Bundler & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Bundler__factory {
    return super.connect(runner) as Bundler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BundlerInterface {
    return new Interface(_abi) as BundlerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Bundler {
    return new Contract(address, _abi, runner) as unknown as Bundler;
  }
}
