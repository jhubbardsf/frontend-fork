/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SignatureVerification,
  SignatureVerificationInterface,
} from "../../../../contracts/permit2/libraries/SignatureVerification";

const _abi = [
  {
    inputs: [],
    name: "InvalidContractSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSigner",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220fba543c7b8ed79a117133e9be27e237ce9a52fe052850dcde6c46d2a3419043464736f6c634300081c0033";

type SignatureVerificationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignatureVerificationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignatureVerification__factory extends ContractFactory {
  constructor(...args: SignatureVerificationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<SignatureVerification> {
    return super.deploy(overrides || {}) as Promise<SignatureVerification>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SignatureVerification {
    return super.attach(address) as SignatureVerification;
  }
  override connect(signer: Signer): SignatureVerification__factory {
    return super.connect(signer) as SignatureVerification__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignatureVerificationInterface {
    return new utils.Interface(_abi) as SignatureVerificationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignatureVerification {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SignatureVerification;
  }
}
