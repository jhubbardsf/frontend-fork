/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BundlerSwapAndDepositWithPermit2,
  BundlerSwapAndDepositWithPermit2Interface,
} from "../../../contracts/Bundler.sol/BundlerSwapAndDepositWithPermit2";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_swapRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_riftExchange",
        type: "address",
      },
      {
        internalType: "address",
        name: "_cbBTC",
        type: "address",
      },
      {
        internalType: "address",
        name: "_permit2",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "cbBTC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMinimum",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "executeSwapAndDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions[]",
            name: "permitted",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitBatchTransferFrom",
        name: "batchPermit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails[]",
        name: "transferDetails",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeSwapAndDepositBatch",
    outputs: [
      {
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "riftExchange",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610100346100e557601f61133238819003918201601f19168301916001600160401b038311848410176100ea578084926080946040528339810103126100e55761004881610100565b9061005560208201610100565b61006d606061006660408501610100565b9301610100565b9260805260a05260c05260e05260405161121d908161011582396080518181816103df0152818161071101526109f3015260a05181818161045f01528181610a9b0152610cb8015260c05181818161035f015281816109730152610c49015260e0518181816101ce015281816108460152610d260152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100e55756fe608080604052600436101561001357600080fd5b600090813560e01c90816312261ee714610cdc575080631c919e1014610c6d5780635ad182d314610bfe5780638a28408514610735578063c31c9c07146106c65763eccf4b4c1461006357600080fd5b60c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c3576004359067ffffffffffffffff82116106c35781360360607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112610584576024359267ffffffffffffffff841161059357366023850112156105935783600401359067ffffffffffffffff82116106c1573660248360061b870101116106c1576044359073ffffffffffffffffffffffffffffffffffffffff82168092036106bd5760643567ffffffffffffffff81116106b957610151903690600401610d4a565b60849591953567ffffffffffffffff81116106b557610174903690600401610d4a565b96909460a4359667ffffffffffffffff88116106b1576101807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc89360301126106b15773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001694853b156106ad57604051967fedd9444b0000000000000000000000000000000000000000000000000000000088526080600489015260e48801917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd826004013591018112156106a95781016024600482013591019267ffffffffffffffff82116106a5578160061b360384136106a5578190606060848c015252610104890192908d5b8181106106875750505060249160448284602094013560a48c0152013560c48a01527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc89820301838a0152838152019b01908a5b818110610668575050508885610334829c8296849c9d9896849660448601527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc858403016064860152610e35565b03925af19081156105c6578491610653575b505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001693604051917f70a08231000000000000000000000000000000000000000000000000000000008352306004840152602083602481895afa92831561064857859361060f575b508482819261040e94604051928392833781018381520390347f00000000000000000000000000000000000000000000000000000000000000005af1610408610e74565b50610ed2565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481885afa9081156105c65784916105d1575b509061045c91610f37565b927f0000000000000000000000000000000000000000000000000000000000000000602060405180937f095ea7b30000000000000000000000000000000000000000000000000000000082528187816104dc8b88600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af19182156105c65773ffffffffffffffffffffffffffffffffffffffff9261050e918691610597575b50610f8b565b1690813b15610593578291610555916040519485809481937f48678e0600000000000000000000000000000000000000000000000000000000835260040160048301611080565b03925af180156105885761056f575b602082604051908152f35b61057a838092610d99565b6105845781610564565b5080fd5b6040513d85823e3d90fd5b8280fd5b6105b9915060203d6020116105bf575b6105b18183610d99565b810190610f73565b38610508565b503d6105a7565b6040513d86823e3d90fd5b919350506020813d602011610607575b816105ee60209383610d99565b81010312610602575184929061045c610451565b600080fd5b3d91506105e1565b91945091506020813d602011610640575b8161062d60209383610d99565b81010312610602575185939091846103c4565b3d9150610620565b6040513d87823e3d90fd5b8161065d91610d99565b610593578238610346565b90919b604080828f60019461067c91610e09565b019d019291016102e6565b9091936040808261069a60019489610e09565b019501929101610292565b8d80fd5b8c80fd5b8a80fd5b8980fd5b8780fd5b8580fd5b8480fd5b835b80fd5b50346106c357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c357602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b506101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c35760443567ffffffffffffffff811161058457610781903690600401610d4a565b6064359167ffffffffffffffff83116106c1576101807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc84360301126106c15760843573ffffffffffffffffffffffffffffffffffffffff81168091036106bd5760807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5c3601126106bd576101243567ffffffffffffffff81116106b95761082d903690600401610d4a565b909173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690604051936040850185811067ffffffffffffffff821117610bd157604052308552600435602086019081528994939291833b156106b957604051967f30f28b7a00000000000000000000000000000000000000000000000000000000885260a4359173ffffffffffffffffffffffffffffffffffffffff83168093036106b55788968795899573ffffffffffffffffffffffffffffffffffffffff61094b958997600489015260c435602489015260e4356044890152610104356064890152511660848701525160a486015260c485015261010060e4850152610104840191610e35565b03925af1801561064857610bbd575b508373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001692604051927f70a08231000000000000000000000000000000000000000000000000000000008452306004850152602084602481885afa938415610588578394610b82575b509181610a1c938293604051928392833781018381520390347f00000000000000000000000000000000000000000000000000000000000000005af1610408610e74565b604051907f70a08231000000000000000000000000000000000000000000000000000000008252306004830152602082602481865afa8015610648578590610b4e575b610a699250610f37565b916024358310610af0576040517f095ea7b30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff811660048301526024820185905285936020908390818781604481016104dc565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6362425443206f7574707574206c657373207468616e206d696e696d756d00006044820152fd5b506020823d602011610b7a575b81610b6860209383610d99565b8101031261060257610a699151610a5f565b3d9150610b5b565b925092506020823d602011610bb5575b81610b9f60209383610d99565b8101031261060257905191859190610a1c6109d8565b3d9150610b92565b84610bca91959295610d99565b923861095a565b60248a7f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b50346106c357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c357602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346106c357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c357602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b90503461058457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105845760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9181601f840112156106025782359167ffffffffffffffff8311610602576020838186019501011161060257565b359073ffffffffffffffffffffffffffffffffffffffff8216820361060257565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610dda57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6020809173ffffffffffffffffffffffffffffffffffffffff610e2b82610d78565b1684520135910152565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b3d15610ecd573d9067ffffffffffffffff8211610dda5760405191610ec160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610d99565b82523d6000602084013e565b606090565b15610ed957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5377617020657865637574696f6e206661696c656400000000000000000000006044820152fd5b91908203918211610f4457565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90816020910312610602575180151581036106025790565b15610f9257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f417070726f76616c20746f205269667445786368616e6765206661696c6564006044820152fd5b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561060257016020813591019167ffffffffffffffff8211610602578160051b3603831361060257565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116106025760209260051b809284830137010190565b906020825273ffffffffffffffffffffffffffffffffffffffff6110a382610d78565b16602083015273ffffffffffffffffffffffffffffffffffffffff6110ca60208301610d78565b16604083015260408101356060830152606081013567ffffffffffffffff811680910361060257608083015260808101357fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000081168091036106025760a083015260a081013560c083015260c081013560ff81168091036106025760e083015260e08101356101008301526101008101359163ffffffff8316809303610602576111e4926101208201526101208201356101408201526111b36111a7611193610140850185610ff0565b6101806101608601526101a0850191611043565b92610160810190610ff0565b916101807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082860301910152611043565b9056fea2646970667358221220dd0d9b499e2c4c1f6212da2bebbd3d6f7ec4f8fd2d22273a2bb3330a633f69c064736f6c634300081c0033";

type BundlerSwapAndDepositWithPermit2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BundlerSwapAndDepositWithPermit2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BundlerSwapAndDepositWithPermit2__factory extends ContractFactory {
  constructor(...args: BundlerSwapAndDepositWithPermit2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _swapRouter: AddressLike,
    _riftExchange: AddressLike,
    _cbBTC: AddressLike,
    _permit2: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _swapRouter,
      _riftExchange,
      _cbBTC,
      _permit2,
      overrides || {}
    );
  }
  override deploy(
    _swapRouter: AddressLike,
    _riftExchange: AddressLike,
    _cbBTC: AddressLike,
    _permit2: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _swapRouter,
      _riftExchange,
      _cbBTC,
      _permit2,
      overrides || {}
    ) as Promise<
      BundlerSwapAndDepositWithPermit2 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): BundlerSwapAndDepositWithPermit2__factory {
    return super.connect(runner) as BundlerSwapAndDepositWithPermit2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BundlerSwapAndDepositWithPermit2Interface {
    return new Interface(_abi) as BundlerSwapAndDepositWithPermit2Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BundlerSwapAndDepositWithPermit2 {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as BundlerSwapAndDepositWithPermit2;
  }
}
