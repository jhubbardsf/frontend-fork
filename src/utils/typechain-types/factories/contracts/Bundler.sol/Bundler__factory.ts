/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Bundler,
  BundlerInterface,
} from "../../../contracts/Bundler.sol/Bundler";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_swapRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_riftExchange",
        type: "address",
      },
      {
        internalType: "address",
        name: "_cbBTC",
        type: "address",
      },
      {
        internalType: "address",
        name: "_permit2",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ApprovalToRiftExchangeFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapExecutionFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    name: "BundlerExecution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "numTransfers",
        type: "uint256",
      },
    ],
    name: "PermitTransferExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "riftExchange",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "RiftDepositExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "initialCbBTCBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "finalCbBTCBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "cbBTCReceived",
        type: "uint256",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    inputs: [],
    name: "cbBTC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "swapCalldata",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "executeSwapAndDeposit",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "initialCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "finalCbBTCBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cbBTCReceived",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BundlerResult",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "riftExchange",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610100346100c857601f610e2238819003918201601f19168301916001600160401b038311848410176100cd578084926080946040528339810103126100c857610048816100e3565b90610055602082016100e3565b61006d6060610066604085016100e3565b93016100e3565b9260805260a05260c05260e052604051610d2a90816100f8823960805181818160a20152610440015260a0518181816105920152610af7015260c05181818161037d0152610a88015260e0518181816101f70152610b650152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100c85756fe608080604052600436101561001357600080fd5b600090813560e01c90816312261ee714610b1b575080631c919e1014610aac5780635ad182d314610a3d5780636ca79b93146100c95763c31c9c071461005857600080fd5b346100c657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b80fd5b506101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c65760243567ffffffffffffffff811161082957610115903690600401610b89565b9060443567ffffffffffffffff8111610a395780600401936101807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83360301126100c6576064359073ffffffffffffffffffffffffffffffffffffffff82168092036100c65760807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c3601126100c6576101043567ffffffffffffffff8111610829576101c7903690600401610b89565b82604080516101d581610bd8565b828152826020820152015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690604051926040840184811067ffffffffffffffff821117610a0c57604052308452602084016004358152833b15610a0857604051947f30f28b7a00000000000000000000000000000000000000000000000000000000865260843573ffffffffffffffffffffffffffffffffffffffff8116809103610a0457867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8783988c9a98859873ffffffffffffffffffffffffffffffffffffffff8d996101249960048a015260a43560248a015260c43560448a015260e43560648a0152511660848801525160a48701523360c487015261010060e4870152816101048701528686013785858286010152011681010301925af1801561081a5782906109f4575b5050817fa3af27cbdd5938c0f2e793fee942c0b3ec8ea9384af488c16a446d87cd5d7bf6602060405160018152a273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690604051957f70a08231000000000000000000000000000000000000000000000000000000008752306004880152602087602481865afa96871561081a5782976109c0575b50604051957f70a08231000000000000000000000000000000000000000000000000000000008752306004880152602087602481875afa96871561089457839761098c575b50818392918392604051928392833781018381520390347f00000000000000000000000000000000000000000000000000000000000000005af13d15610987573d67ffffffffffffffff811161095a57604051906104ad60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160183610c23565b81528260203d92013e5b1561093257604051947f70a08231000000000000000000000000000000000000000000000000000000008652306004870152602086602481865afa95861561081a5782966108f9575b50808603958087116108cc577f4d3257edb95914b701655f9bf4b58e4b422017a7b94dad03a20dae00f4b1cbb7916060916040519182526020820152876040820152a18486019384871161089f576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526020816044818673ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016988960048401528c60248401525af1908115610894578391610855575b501561082d57823b1561082957604051907f48678e060000000000000000000000000000000000000000000000000000000082526020600483015273ffffffffffffffffffffffffffffffffffffffff6106288a610bb7565b16602483015273ffffffffffffffffffffffffffffffffffffffff61064f60248301610bb7565b166044830152604481013598896064840152606482013567ffffffffffffffff811680910361082557608484015260848201357fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000081168091036108255760a484015260a482013560c484015260c482013560ff81168091036108255760e484015260e482013561010484015261010482013563ffffffff81168091036108255761076c859361073b86948594610124860152610124830135610144860152610164610733610721610144860184610c64565b610180848a01526101a4890191610cb7565b930190610c64565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc85840301610184860152610cb7565b038183875af1801561081a57610805575b50507fa31e8bc1bdee2d6252cc2eaffcfd97de92d288a10a0c3699f5b066a6697a33b56020606097604051908152a27f5798042aa6f4acc5fdf6fc5c6c8a1f092d35373907c7bf9ac07a40c40a2995306020604051858152a2604080516107e381610bd8565b8481526020810192835201918252604051928352516020830152516040820152f35b610810828092610c23565b6100c6578061077d565b6040513d84823e3d90fd5b8480fd5b5080fd5b6004827f34f236ee000000000000000000000000000000000000000000000000000000008152fd5b90506020813d60201161088c575b8161087060209383610c23565b810103126108885751801515810361088857386105cf565b8280fd5b3d9150610863565b6040513d85823e3d90fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b9095506020813d60201161092a575b8161091560209383610c23565b8101031261092557519438610500565b600080fd5b3d9150610908565b807f7055054e0000000000000000000000000000000000000000000000000000000060049252fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6104b7565b9096506020813d6020116109b8575b816109a860209383610c23565b8101031261092557519582610427565b3d915061099b565b9096506020813d6020116109ec575b816109dc60209383610c23565b81010312610925575195386103e2565b3d91506109cf565b6109fd91610c23565b3881610338565b8780fd5b8580fd5b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8380fd5b50346100c657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346100c657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b90503461082957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108295760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9181601f840112156109255782359167ffffffffffffffff8311610925576020838186019501011161092557565b359073ffffffffffffffffffffffffffffffffffffffff8216820361092557565b6060810190811067ffffffffffffffff821117610bf457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610bf457604052565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561092557016020813591019167ffffffffffffffff8211610925578160051b3603831361092557565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116109255760209260051b80928483013701019056fea26469706673582212209dbea39612ba48d047673d4fdd8b73a78d514333180d2fd9baed609e00090e1e64736f6c634300081c0033";

type BundlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BundlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bundler__factory extends ContractFactory {
  constructor(...args: BundlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _swapRouter: AddressLike,
    _riftExchange: AddressLike,
    _cbBTC: AddressLike,
    _permit2: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _swapRouter,
      _riftExchange,
      _cbBTC,
      _permit2,
      overrides || {}
    );
  }
  override deploy(
    _swapRouter: AddressLike,
    _riftExchange: AddressLike,
    _cbBTC: AddressLike,
    _permit2: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _swapRouter,
      _riftExchange,
      _cbBTC,
      _permit2,
      overrides || {}
    ) as Promise<
      Bundler & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Bundler__factory {
    return super.connect(runner) as Bundler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BundlerInterface {
    return new Interface(_abi) as BundlerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Bundler {
    return new Contract(address, _abi, runner) as unknown as Bundler;
  }
}
