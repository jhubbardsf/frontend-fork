/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RiftExchange,
  RiftExchangeInterface,
  Types,
} from "../../contracts/RiftExchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_mmrRoot",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_depositToken",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_circuitVerificationKey",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_feeRouter",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "height",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "cumulativeChainwork",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BlockLeaf",
        name: "_tipBlockLeaf",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CannotOverwriteOngoingSwap",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainworkTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "CheckpointNotEstablished",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositAmountTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositStillLocked",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositVaultDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "DepositVaultNotOverwritable",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyDepositVault",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidBlockInclusionProof",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidConfirmationBlockDelta",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidScriptPubKey",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSwapBlockInclusionProof",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidVaultCommitment",
    type: "error",
  },
  {
    inputs: [],
    name: "NoFeeToPay",
    type: "error",
  },
  {
    inputs: [],
    name: "NoSwapsToSubmit",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughConfirmations",
    type: "error",
  },
  {
    inputs: [],
    name: "SatOutputTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "StillInChallengePeriod",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapNotProved",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "priorMmrRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "newMmrRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "compressedBlockLeaves",
        type: "bytes",
      },
    ],
    name: "BitcoinLightClientUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "swapIndex",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "depositVaultCommitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "swapBitcoinBlockHash",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "liquidityUnlockTimestamp",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalSwapFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSwapOutput",
            type: "uint256",
          },
          {
            internalType: "enum Types.SwapState",
            name: "state",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct Types.ProposedSwap[]",
        name: "swaps",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "enum Types.SwapUpdateContext",
        name: "context",
        type: "uint8",
      },
    ],
    name: "SwapsUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "vaultIndex",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "depositTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "depositFee",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "ownerAddress",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "attestedBitcoinBlockHeight",
            type: "uint64",
          },
        ],
        indexed: false,
        internalType: "struct Types.DepositVault[]",
        name: "vaults",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "enum Types.VaultUpdateContext",
        name: "context",
        type: "uint8",
      },
    ],
    name: "VaultsUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "CIRCUIT_VERIFICATION_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DEPOSIT_TOKEN",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEE_ROUTER_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TOKEN_DECIMALS",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VERIFIER",
    outputs: [
      {
        internalType: "contract ISP1Verifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accumulatedFeeBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "checkpoints",
    outputs: [
      {
        internalType: "bool",
        name: "established",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "height",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "cumulativeChainwork",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BlockLeaf",
        name: "tipBlockLeaf",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "depositOwnerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "bytes32",
            name: "depositSalt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "safeBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "safeBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.DepositLiquidityParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "depositLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "depositOwnerAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "depositAmount",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "expectedSats",
                type: "uint64",
              },
              {
                internalType: "bytes22",
                name: "btcPayoutScriptPubKey",
                type: "bytes22",
              },
              {
                internalType: "bytes32",
                name: "depositSalt",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                components: [
                  {
                    internalType: "bytes32",
                    name: "blockHash",
                    type: "bytes32",
                  },
                  {
                    internalType: "uint32",
                    name: "height",
                    type: "uint32",
                  },
                  {
                    internalType: "uint256",
                    name: "cumulativeChainwork",
                    type: "uint256",
                  },
                ],
                internalType: "struct Types.BlockLeaf",
                name: "safeBlockLeaf",
                type: "tuple",
              },
              {
                internalType: "bytes32[]",
                name: "safeBlockSiblings",
                type: "bytes32[]",
              },
              {
                internalType: "bytes32[]",
                name: "safeBlockPeaks",
                type: "bytes32[]",
              },
            ],
            internalType: "struct Types.DepositLiquidityParams",
            name: "depositParams",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "vaultIndex",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "depositTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "depositAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositFee",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "expectedSats",
                type: "uint64",
              },
              {
                internalType: "bytes22",
                name: "btcPayoutScriptPubKey",
                type: "bytes22",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "ownerAddress",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                internalType: "uint64",
                name: "attestedBitcoinBlockHeight",
                type: "uint64",
              },
            ],
            internalType: "struct Types.DepositVault",
            name: "overwriteVault",
            type: "tuple",
          },
        ],
        internalType: "struct Types.DepositLiquidityWithOverwriteParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "depositLiquidityWithOverwrite",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLightClientHeight",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "swapIndex",
        type: "uint256",
      },
    ],
    name: "getSwapCommitment",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSwapCommitmentsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultIndex",
        type: "uint256",
      },
    ],
    name: "getVaultCommitment",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVaultCommitmentsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mmrRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "payoutToFeeRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "height",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "cumulativeChainwork",
            type: "uint256",
          },
        ],
        internalType: "struct Types.BlockLeaf",
        name: "blockLeaf",
        type: "tuple",
      },
      {
        internalType: "bytes32[]",
        name: "siblings",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "peaks",
        type: "bytes32[]",
      },
    ],
    name: "proveBlockInclusion",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "swapIndex",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "depositVaultCommitment",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "swapBitcoinBlockHash",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                internalType: "uint64",
                name: "liquidityUnlockTimestamp",
                type: "uint64",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "totalSwapFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalSwapOutput",
                type: "uint256",
              },
              {
                internalType: "enum Types.SwapState",
                name: "state",
                type: "uint8",
              },
            ],
            internalType: "struct Types.ProposedSwap",
            name: "swap",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "swapBlockChainwork",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "swapBlockHeight",
            type: "uint32",
          },
          {
            internalType: "bytes32[]",
            name: "bitcoinSwapBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "bitcoinSwapBlockPeaks",
            type: "bytes32[]",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "vaultIndex",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "depositTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "depositAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositFee",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "expectedSats",
                type: "uint64",
              },
              {
                internalType: "bytes22",
                name: "btcPayoutScriptPubKey",
                type: "bytes22",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "ownerAddress",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                internalType: "uint64",
                name: "attestedBitcoinBlockHeight",
                type: "uint64",
              },
            ],
            internalType: "struct Types.DepositVault",
            name: "utilizedVault",
            type: "tuple",
          },
          {
            internalType: "uint32",
            name: "tipBlockHeight",
            type: "uint32",
          },
        ],
        internalType: "struct Types.ReleaseLiquidityParams[]",
        name: "paramsArray",
        type: "tuple[]",
      },
    ],
    name: "releaseLiquidityBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "swapBitcoinTxid",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "vaultIndex",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "depositTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "depositAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositFee",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "expectedSats",
                type: "uint64",
              },
              {
                internalType: "bytes22",
                name: "btcPayoutScriptPubKey",
                type: "bytes22",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "ownerAddress",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                internalType: "uint64",
                name: "attestedBitcoinBlockHeight",
                type: "uint64",
              },
            ],
            internalType: "struct Types.DepositVault",
            name: "vault",
            type: "tuple",
          },
          {
            internalType: "enum Types.StorageStrategy",
            name: "storageStrategy",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "localOverwriteIndex",
            type: "uint16",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "swapBitcoinBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "swapBitcoinBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "swapBitcoinBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.SubmitSwapProofParams[]",
        name: "swapParams",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "swapIndex",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "depositVaultCommitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "swapBitcoinBlockHash",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "liquidityUnlockTimestamp",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalSwapFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSwapOutput",
            type: "uint256",
          },
          {
            internalType: "enum Types.SwapState",
            name: "state",
            type: "uint8",
          },
        ],
        internalType: "struct Types.ProposedSwap[]",
        name: "overwriteSwaps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "submitBatchSwapProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "swapBitcoinTxid",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "vaultIndex",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "depositTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "depositAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "depositFee",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "expectedSats",
                type: "uint64",
              },
              {
                internalType: "bytes22",
                name: "btcPayoutScriptPubKey",
                type: "bytes22",
              },
              {
                internalType: "address",
                name: "specifiedPayoutAddress",
                type: "address",
              },
              {
                internalType: "address",
                name: "ownerAddress",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "confirmationBlocks",
                type: "uint8",
              },
              {
                internalType: "uint64",
                name: "attestedBitcoinBlockHeight",
                type: "uint64",
              },
            ],
            internalType: "struct Types.DepositVault",
            name: "vault",
            type: "tuple",
          },
          {
            internalType: "enum Types.StorageStrategy",
            name: "storageStrategy",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "localOverwriteIndex",
            type: "uint16",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "swapBitcoinBlockLeaf",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "swapBitcoinBlockSiblings",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "swapBitcoinBlockPeaks",
            type: "bytes32[]",
          },
        ],
        internalType: "struct Types.SubmitSwapProofParams[]",
        name: "swapParams",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "priorMmrRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "newMmrRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "compressedBlockLeaves",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "tipBlockLeaf",
            type: "tuple",
          },
        ],
        internalType: "struct Types.BlockProofParams",
        name: "blockProofParams",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "swapIndex",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "depositVaultCommitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "swapBitcoinBlockHash",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "liquidityUnlockTimestamp",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalSwapFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSwapOutput",
            type: "uint256",
          },
          {
            internalType: "enum Types.SwapState",
            name: "state",
            type: "uint8",
          },
        ],
        internalType: "struct Types.ProposedSwap[]",
        name: "overwriteSwaps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "submitBatchSwapProofWithLightClientUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapCommitments",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "priorMmrRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "newMmrRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "compressedBlockLeaves",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32",
              },
              {
                internalType: "uint32",
                name: "height",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "cumulativeChainwork",
                type: "uint256",
              },
            ],
            internalType: "struct Types.BlockLeaf",
            name: "tipBlockLeaf",
            type: "tuple",
          },
        ],
        internalType: "struct Types.BlockProofParams",
        name: "blockProofParams",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "updateLightClient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "vaultCommitments",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "vaultIndex",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "depositTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "depositAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "depositFee",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "expectedSats",
            type: "uint64",
          },
          {
            internalType: "bytes22",
            name: "btcPayoutScriptPubKey",
            type: "bytes22",
          },
          {
            internalType: "address",
            name: "specifiedPayoutAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "ownerAddress",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "confirmationBlocks",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "attestedBitcoinBlockHeight",
            type: "uint64",
          },
        ],
        internalType: "struct Types.DepositVault",
        name: "vault",
        type: "tuple",
      },
    ],
    name: "withdrawLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61012080604052346102585780613c21803803809161001e828561025d565b83398101039061010082126102585780519061003c60208201610280565b9160408201519161004f60608201610280565b93606061005e60808401610280565b96609f1901126102585760405191606083016001600160401b038111848210176102425760405260a0810151835260c08101519063ffffffff821682036102585760e09160208501520151604083015282600055604051604081019381851060018060401b0386111761024257604060209460039260049783526001855286850191825260005260018652816000209351151560ff8019865416911617845551805160018501556002840163ffffffff878301511663ffffffff19825416179055015191015560018060a01b0316806080526040519283809263313ce56760e01b82525afa908115610236576000916101f3575b5060a05260c0526001600160a01b031660e0526101005260405161398c90816102958239608051818181610233015281816109e30152818161198701528181611c5a0152613587015260a05181610fc0015260c0518181816106d201528181610867015281816111c70152611658015260e051818181610617015281816110b1015281816115850152611cc80152610100518181816101e201526108d50152f35b6020813d60201161022e575b8161020c6020938361025d565b8101031261022a57519060ff82168203610227575038610152565b80fd5b5080fd5b3d91506101ff565b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761024257604052565b51906001600160a01b03821682036102585756fe61012080604052600436101561001457600080fd5b600090813560e01c90816308c84e7014611c7e5750806313f6658714611c0f57806316a6db20146117635780631cbeebeb146117045780631f1a490814611415578063365df233146113cc57806342769946146112df57806348678e0614611269578063592b664914610fe45780635b7f415c14610f885780637688e1bc146109365780637ed34a36146108f9578063898aeacb1461088a5780638d5ca05214610831578063992284a6146107f55780639f63bd97146107b8578063a6a0f96e14610760578063c1896938146104cf578063ca18100d14610493578063d21ddc6114610458578063d6d5145914610378578063eb5e91ff146102f6578063f23a94a9146101685763f5095c161461012a57600080fd5b3461016557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610165576020600254604051908152f35b80fd5b503461016557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101655760045480156102ce5760048281556040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016918101919091526024810191909152602081806044810103818573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156102c3578291610294575b501561026c5780f35b807f90b8ec180000000000000000000000000000000000000000000000000000000060049252fd5b6102b6915060203d6020116102bc575b6102ae8183611ebc565b810190612141565b38610263565b503d6102a4565b6040513d84823e3d90fd5b6004827f3ef2b514000000000000000000000000000000000000000000000000000000008152fd5b50346101655760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610165576040608091600435815260016020522061037661034a600160ff8454169301611fad565b60405192151583526020830190604080918051845263ffffffff60208201511660208501520151910152565bf35b50346101655761038736611f3d565b6020810190813581357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe818336030181121561045457826103ce836060936103d69601613189565b94909561283d565b50013561042c5761042992916103ee61042492611d82565b9091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83549160031b92831b921b1916179055565b6134aa565b80f35b6004847f7d557338000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b503461016557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101655760209054604051908152f35b503461016557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610165576020600454604051908152f35b50346101655760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610165578060043567ffffffffffffffff811161075d57610520903690600401611cec565b919060243567ffffffffffffffff811161075957610542903690600401611d22565b6044359067ffffffffffffffff82116104545761066a9261056a610592933690600401611d54565b97909561058d600054600052600160205263ffffffff6002604060002001541690565b612b0b565b9361010051946040516105a481611dff565b85815285602082015285604082015260606105bd612466565b910152610696604051916105d083611e4a565b868352866020840152866040840152604051926105ec84611dff565b878452876020850152876040850152606084015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016926040519161064583611e4a565b61064e89612270565b8883526020830152604082015260405194859160208301612485565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101855284611ebc565b803b15610454576106fa938593604051958694859384937f41493c600000000000000000000000000000000000000000000000000000000085527f000000000000000000000000000000000000000000000000000000000000000060048601612584565b03915afa80156102c357610740575b506040517fe8b89fd0756cdb35ef6d9ff605cca13c890bbd62d2befac12cdf4cf4d3e73a72908061073a85826123cd565b0390a180f35b8161074a91611ebc565b610755578138610709565b5080fd5b8280fd5b50fd5b50346101655760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016557600435906002548210156101655760206107a983611d82565b90549060031b1c604051908152f35b50346101655760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101655760206107a9600435611d82565b503461016557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610165576020600354604051908152f35b503461016557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101655760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461016557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016557602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101655760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101655760206107a9600435611dcc565b50346101655760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101655760043567ffffffffffffffff811161075557610986903690600401611cec565b9061099082612605565b9061099a83612159565b926109a86040519485611ebc565b8084527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06109d582612159565b01855b818110610f715750507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691855b828110610c06575050505060405160408101604082528251809152602060608301930190855b818110610be557505050807fe8b89fd0756cdb35ef6d9ff605cca13c890bbd62d2befac12cdf4cf4d3e73a7292600160208301520390a160405160408101604082528251809152602060608301930190845b818110610afc57505050807f5579c3d9c997c3d3dd2d9b6a31a7dfc0db5442568016ac9668714bea178a8a2892600260208301520390a180f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b909193602061016082610bda600194895167ffffffffffffffff61014080928051855282602082015116602086015260408101516040860152606081015160608601528260808201511660808601527fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000060a08201511660a086015273ffffffffffffffffffffffffffffffffffffffff60c08201511660c086015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e086015261010081015161010086015260ff61012082015116610120860152015116910152565b019501929101610a93565b909193602061012082610bfb6001948951612341565b019501929101610a41565b610c19610c148285856126b2565b6136fe565b50610100610c288285856126b2565b01356003811015610f6d57600190610c3f81612270565b03610f455767ffffffffffffffff610c636080610c5d8487876126b2565b01611fdb565b164210610f1d57610c816101a0610c7b8386866126b2565b0161283d565b6020610c8e8386866126b2565b013503610ef557610d436040610ca58386866126b2565b0135610cbe610140610cb88588886126b2565b016122cb565b63ffffffff610120610cd18689896126b2565b01359160405193610ce185611e4a565b84521660208301526040820152610d07610cfc8487876126b2565b6101608101906126f2565b90610d21610d168689896126b2565b6101808101906126f2565b92909160ff610d3c6060610d368a8d8d6126b2565b01611ff0565b1694613756565b610d5b366101a0610d558487876126b2565b01612042565b876040820152876060820152610d7d610d7382612856565b6103ee8351611d82565b610d87828861225c565b52610d92818761225c565b50610da736610da28386866126b2565b612746565b6002610100820152610dcf610dbb8261389a565b6103ee610dc98588886126b2565b35611dcc565b610de960c0610ddf8487876126b2565b01356004546127d6565b600455610e6a6020610e0760a0610e018689896126b2565b01612120565b60e0610e148689896126b2565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90931660048401520135602482015291829081906044820190565b03818c8a5af1908115610eea578991610ecc575b5015610ea45790600191610e92828861225c565b52610e9d818761225c565b5001610a1b565b6004887f90b8ec18000000000000000000000000000000000000000000000000000000008152fd5b610ee4915060203d81116102bc576102ae8183611ebc565b38610e7e565b6040513d8b823e3d90fd5b6004877fceb1159d000000000000000000000000000000000000000000000000000000008152fd5b6004877fb570dfd4000000000000000000000000000000000000000000000000000000008152fd5b6004877f8bf1750c000000000000000000000000000000000000000000000000000000008152fd5b8780fd5b602090610f7c612171565b828289010152016109d8565b503461016557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016557602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101655760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101655760043567ffffffffffffffff811161075557806004019060c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82360301126107595760243567ffffffffffffffff811161126557611077903690600401611d54565b9091604481018561109261108b838861227a565b36916122dc565b602081519101209473ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016946110db83612159565b956110e96040519788611ebc565b8387527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061111685612159565b01845b8181106112435750509061066a9161118b8a3598606460248a013599019a6040519061114482611dff565b8b82528a6020830152604082015261115c368d611efd565b60608201526040519161116e83611e4a565b600183526020830152604082015260405194859160208301612485565b803b15610454576111ef938593604051958694859384937f41493c600000000000000000000000000000000000000000000000000000000085527f000000000000000000000000000000000000000000000000000000000000000060048601612584565b03915afa80156102c357611222575b5061042961121c868686611212878c61227a565b9490933690611efd565b91612946565b81611231919695949396611ebc565b61123f5790919285386111fe565b8580fd5b6020919293949550611253612466565b82828b01015201908a94939291611119565b8380fd5b50346101655761128461127b36611f3d565b60025490613189565b600254680100000000000000008110156112b25761042992916103ee82600161042494016002556002611de7565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b5034610165577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360160a08112610755576060136101655760405161132381611e4a565b600435815260243563ffffffff81168103610759576020820152604435604082015260643567ffffffffffffffff811161075957611365903690600401611cec565b9060843567ffffffffffffffff811161045457916020949161138f6113c295943690600401611cec565b9290916113ba6113b5600054600052600160205263ffffffff6002604060002001541690565b61241f565b94549561303f565b6040519015158152f35b50346101655760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016557600435906003548210156101655760206107a983611dcc565b50346101655760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101655760043567ffffffffffffffff811161075557611465903690600401611cec565b6024359167ffffffffffffffff831161126557826004019060c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc85360301126104545760443567ffffffffffffffff811161123f576114c9903690600401611d22565b92909360643567ffffffffffffffff8111610f6d576114ec903690600401611d54565b95909383359560248901359260648a019460448b019a8961150d8d8a61227a565b9088611519368c611efd565b9061152394612946565b60840161152f906122cb565b9361153994612b0b565b9261010051976115489161227a565b3690611553926122dc565b80519060200120906040519561156887611dff565b8652602086015260408501523661157e91611efd565b60608401527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1692604051916115c883611e4a565b826115f296949261161e9260028b9896526020830152604082015260405196879160208301612485565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101875286611ebc565b813b156112655761168094604051958694859384937f41493c600000000000000000000000000000000000000000000000000000000085527f000000000000000000000000000000000000000000000000000000000000000060048601612584565b03915afa80156116f9576116c1575b5061073a7fe8b89fd0756cdb35ef6d9ff605cca13c890bbd62d2befac12cdf4cf4d3e73a7291604051918291826123cd565b826116f17fe8b89fd0756cdb35ef6d9ff605cca13c890bbd62d2befac12cdf4cf4d3e73a72939461073a93611ebc565b92915061168f565b6040513d85823e3d90fd5b503461016557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610165576020611755600054600052600160205263ffffffff6002604060002001541690565b63ffffffff60405191168152f35b5034610165577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360161016081126107555761179d6127e3565b50604435908115611be7576024359167ffffffffffffffff83169182840361045457610124359260ff8416808503611b6157611c20029063ffffffff8216918203611bba570167ffffffffffffffff8111611b8d5767ffffffffffffffff164210611b655761016013611265576040519261181784611e66565b6004358452602084015260408301908082526060840192606435845260843567ffffffffffffffff81168103611b6157608086015260a4357fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000081168103611b615760a086015260c43573ffffffffffffffffffffffffffffffffffffffff81168103611b615760c086015260e4359073ffffffffffffffffffffffffffffffffffffffff82168203611b61578160e08701526101043561010087015261012086015285610144359467ffffffffffffffff86168603610755578160209561196d976101408a0152525261191661190c86612856565b6103ee8751611d82565b60405193849283927fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818673ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156116f9578391611b42575b5015611b1a576119c56121c3565b906119cf8261224f565b526119d98161224f565b506040519060408201604083528151809152602060608401920190845b818110611a315750505090807f5579c3d9c997c3d3dd2d9b6a31a7dfc0db5442568016ac9668714bea178a8a2892600160208301520390a180f35b909192602061016082611b0f600194885167ffffffffffffffff61014080928051855282602082015116602086015260408101516040860152606081015160608601528260808201511660808601527fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000060a08201511660a086015273ffffffffffffffffffffffffffffffffffffffff60c08201511660c086015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e086015261010081015161010086015260ff61012082015116610120860152015116910152565b0194019291016119f6565b6004827f90b8ec18000000000000000000000000000000000000000000000000000000008152fd5b611b5b915060203d6020116102bc576102ae8183611ebc565b386119b7565b8680fd5b6004857f06d44aa4000000000000000000000000000000000000000000000000000000008152fd5b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6004837f7941e9ad000000000000000000000000000000000000000000000000000000008152fd5b503461016557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016557602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b90503461075557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126107555760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9181601f84011215611d1d5782359167ffffffffffffffff8311611d1d576020808501948460051b010111611d1d57565b600080fd5b9181601f84011215611d1d5782359167ffffffffffffffff8311611d1d576020808501946101208502010111611d1d57565b9181601f84011215611d1d5782359167ffffffffffffffff8311611d1d5760208381860195010111611d1d57565b600254811015611d9d57600260005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600354811015611d9d57600360005260206000200190600090565b8054821015611d9d5760005260206000200190600090565b6080810190811067ffffffffffffffff821117611e1b57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff821117611e1b57604052565b610160810190811067ffffffffffffffff821117611e1b57604052565b610120810190811067ffffffffffffffff821117611e1b57604052565b6040810190811067ffffffffffffffff821117611e1b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611e1b57604052565b9190826060910312611d1d57604051611f1581611e4a565b809280358252602081013563ffffffff81168103611d1d576020830152604090810135910152565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112611d1d576004359067ffffffffffffffff8211611d1d577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8261018092030112611d1d5760040190565b90604051611fba81611e4a565b6040600282948054845263ffffffff60018201541660208501520154910152565b3567ffffffffffffffff81168103611d1d5790565b3560ff81168103611d1d5790565b359067ffffffffffffffff82168203611d1d57565b359073ffffffffffffffffffffffffffffffffffffffff82168203611d1d57565b359060ff82168203611d1d57565b919082610160910312611d1d5760405161205b81611e66565b80928035825261206d60208201611ffe565b6020830152604081013560408301526060810135606083015261209260808201611ffe565b608083015260a0810135907fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000082168203611d1d5761014061211b91819360a08601526120e060c08201612013565b60c08601526120f160e08201612013565b60e086015261010081013561010086015261210f6101208201612034565b61012086015201611ffe565b910152565b3573ffffffffffffffffffffffffffffffffffffffff81168103611d1d5790565b90816020910312611d1d57518015158103611d1d5790565b67ffffffffffffffff8111611e1b5760051b60200190565b6040519061217e82611e66565b6000610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b604080519091906121d48382611ebc565b60018152917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018260005b82811061220b57505050565b602090612216612171565b828285010152016121ff565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526041600452fd5b805115611d9d5760200190565b8051821015611d9d5760209160051b010190565b60031115610acd57565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215611d1d570180359067ffffffffffffffff8211611d1d57602001918136038313611d1d57565b3563ffffffff81168103611d1d5790565b92919267ffffffffffffffff8211611e1b576040519161232460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184611ebc565b829481845281830111611d1d578281602093846000960137010152565b610100809180518452602081015160208501526040810151604085015260ff606082015116606085015267ffffffffffffffff608082015116608085015273ffffffffffffffffffffffffffffffffffffffff60a08201511660a085015260c081015160c085015260e081015160e08501520151916123bf83612270565b0152565b60021115610acd57565b91906040830160408452815180915260206060850192019060005b8181106123fe5750919391505060206000910152565b9091926020610120826124146001948851612341565b0194019291016123e8565b63ffffffff60019116019063ffffffff821161243757565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6040519061247382611e4a565b60006040838281528260208201520152565b60208152610120810191805161249a81612270565b6020830152602081015192610100604084015283518091526020610140840194019060005b818110612517575050509060c06060604061251494015180518285015260208101516080850152604081015160a08501520151910190604080918051845263ffffffff60208201511660208501520151910152565b90565b90919460206060600192604089518051835284810151858401520151604082015201960191019190916124bf565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b9493919085526060602086015280519081606087015260005b8281106125ef575050847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000608080966125149a9b0101520116810190604083828403019101520191612545565b8060208092840101516080828a0101520161259d565b9061260f82612159565b61261c6040519182611ebc565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061264a8294612159565b019060005b82811061265b57505050565b60209060405161266a81611e83565b60008152600083820152600060408201526000606082015260006080820152600060a0820152600060c0820152600060e082015260006101008201528282850101520161264f565b9190811015611d9d5760051b810135907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce181360301821215611d1d570190565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215611d1d570180359067ffffffffffffffff8211611d1d57602001918160051b36038313611d1d57565b919082610120910312611d1d5760405161275f81611e83565b610100819380358352602081013560208401526040810135604084015261278860608201612034565b606084015261279960808201611ffe565b60808401526127aa60a08201612013565b60a084015260c081013560c084015260e081013560e08401520135906003821015611d1d576101000152565b9190820180921161243757565b6127f66127f1366004612042565b612856565b6128036004356002611de7565b90549060031b1c81036128135790565b7fcd1d240d0000000000000000000000000000000000000000000000000000000060005260046000fd5b61280361284d6127f13684612042565b91356002611de7565b60405161292f60208201809367ffffffffffffffff61014080928051855282602082015116602086015260408101516040860152606081015160608601528260808201511660808601527fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000060a08201511660a086015273ffffffffffffffffffffffffffffffffffffffff60c08201511660c086015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e086015261010081015161010086015260ff61012082015116610120860152015116910152565b610160815261294061018082611ebc565b51902090565b919092600054808514612ae357836000526001602052604060002061298260016040519261297384611ea0565b60ff8154161515845201611fad565b60208201525115612ab9576000526001602052600360406000200154604083015110612a8f577f6768baae39ee0e687f7c44f7006a147b15ffb56031969140096fe95461eea2fd94612a8a92600360408051926129de84611ea0565b6001845260208401908152886000526001602052816000209351151560ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00865416911617845551805160018501556002840163ffffffff6020830151167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082541617905501519101558460005560405194859485526020850152606060408501526060840191612545565b0390a1565b7f1e002fd40000000000000000000000000000000000000000000000000000000060005260046000fd5b7fe1965c650000000000000000000000000000000000000000000000000000000060005260046000fd5b505050505050565b3561ffff81168103611d1d5790565b9190811015611d9d57610120020190565b929093919360c05260805260e052600061010052811561300557612b3f612b3183612159565b60405160a05260a051611ebc565b60a0518290527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612b6f83612159565b0160005b818110612fec57505060a051612b8883612605565b610100526003549360005b84811015612fe4578560008260051b60c05101357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffda160c051360301811215610755576101808160c0510101356002811015938461126557612bf3826123c3565b81612f46577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612f1957600101995b612c353660208560c0510101612042565b6040810151606082015191828060011b0460021483151715611bba5760600151612c5e9161317c565b90612c6f60208660c051010161283d565b88612d1887612d136101c08260c0510101612cbb813595604051612c9281611e4a565b8560c05101358152876020820152886040820152612cb28260a05161225c565b5260a05161225c565b50610140612cd56102208560c05101018560c051016126f2565b60c051919591612cec9083016102408101906126f2565b93909260c05101019560ff612d0b612d0389611ff0565b963690611efd565b951694613756565b611ff0565b8d63ffffffff67ffffffffffffffff612d386101608c60c0510101611fdb565b1691160367ffffffffffffffff8111612eec5767ffffffffffffffff1660850267ffffffffffffffff8116908103612eec5761e3b30167ffffffffffffffff8111612eec5767ffffffffffffffff6103e88161012c931604160167ffffffffffffffff8111612eec5773ffffffffffffffffffffffffffffffffffffffff93929167ffffffffffffffff612dd08160ff9416426127d6565b1692612de260e08c60c0510101612120565b9460405199612df08b611e83565b8a5260208a0152604089015216606087015260808601521660a084015260011b60c083015260e08201526001610100820152612e2f866101005161225c565b52612e3d856101005161225c565b50612e54612e4e866101005161225c565b5161389a565b9361075957612e62816123c3565b80612e9d57505060035490680100000000000000008210156122225750600192916103ee8285612e9794016003556003611de7565b01612b93565b600194939192508490612eaf816123c3565b14612ebc575b5050612e97565b6103ee610dc961ffff612ed96101a0612ee59660c0510101612aeb565b1660e051608051612afa565b3880612eb5565b60248a7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b9993508293612f54826123c3565b60018203612c2457506101a08260c0510101612f78610c1461ffff612ed984612aeb565b50610100612f8b61ffff612ed984612aeb565b0135600381101561045457600290612fa281612270565b03612fbc5761ffff612ed9612fb692612aeb565b35612c24565b6004847fa5f611fd000000000000000000000000000000000000000000000000000000008152fd5b509250925050565b602090612ff7612466565b828260a05101015201612b73565b7f08d98c4f0000000000000000000000000000000000000000000000000000000060005260046000fd5b9190811015611d9d5760051b0190565b919093929363ffffffff61307684516020860195604084885116910151919091606092604051928352602083015260408201522090565b935116906000925b8084106130fa575050505060009060005b8381106130d4575b5050156130cb576130a7916138bc565b9081156130c35763ffffffff1660005260205260406000201490565b505050600090565b50505050600090565b816130e082868861302f565b35146130ee5760010161308f565b50505060013880613097565b9293600183811c94929381160361312f5761311685838561302f565b3560005260205260016040600020945b0192919061307e565b61313a85838561302f565b35906000526020526001604060002094613126565b357fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000081168103611d1d5790565b9190820391821161243757565b919091613194612171565b506040810135906107d182106134805760608101916103e867ffffffffffffffff6131be85611fdb565b161061345657608082016131d18161314f565b7fff000000000000000000000000000000000000000000000000000000000000008160001a60f81b16159081613404575b50156133da576132646132196101408501856126f2565b906132286101608701876126f2565b906132363660e08a01611efd565b9361325a6113b5600054600052600160205263ffffffff6002604060002001541690565b936000549561303f565b156133b0576005820282810460051483151715612437576127109004918261328b9161317c565b9361329590611fdb565b9061329f9061314f565b6132ab60208501612120565b906132b585612120565b92884660a0880135916132db929091606092604051928352602083015260408201522090565b946132e860c08801611ff0565b96610100016132f6906122cb565b976040519a6133048c611e66565b8b524267ffffffffffffffff1660208c015260408b015260608a015267ffffffffffffffff1660808901527fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001660a088015273ffffffffffffffffffffffffffffffffffffffff1660c087015273ffffffffffffffffffffffffffffffffffffffff1660e086015261010085015260ff1661012084015263ffffffff1661014083015261251482612856565b7f4784fd310000000000000000000000000000000000000000000000000000000060005260046000fd5b7ffad7db070000000000000000000000000000000000000000000000000000000060005260046000fd5b60011a60f81b7fff00000000000000000000000000000000000000000000000000000000000000167f140000000000000000000000000000000000000000000000000000000000000014905038613202565b7ffde594310000000000000000000000000000000000000000000000000000000060005260046000fd5b7f55fcd0270000000000000000000000000000000000000000000000000000000060005260046000fd5b6134b26121c3565b90806134bd8361224f565b526134c78261224f565b50604051916040830160408452815180915260206060850192019060005b8181106136155750505082807f5579c3d9c997c3d3dd2d9b6a31a7dfc0db5442568016ac9668714bea178a8a2892600060206135309701520390a160606040820151910151906127d6565b604051907f23b872dd0000000000000000000000000000000000000000000000000000000082523360048301523060248301526044820152602081606481600073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1908115613609576000916135ea575b50156135c057565b7f90b8ec180000000000000000000000000000000000000000000000000000000060005260046000fd5b613603915060203d6020116102bc576102ae8183611ebc565b386135b8565b6040513d6000823e3d90fd5b9091926020610160826136f3600194885167ffffffffffffffff61014080928051855282602082015116602086015260408101516040860152606081015160608601528260808201511660808601527fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000060a08201511660a086015273ffffffffffffffffffffffffffffffffffffffff60c08201511660c086015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e086015261010081015161010086015260ff61012082015116610120860152015116910152565b0194019291016134e5565b61371c61371361370e3684612746565b61389a565b91356003611de7565b90549060031b1c810361372c5790565b7f1a40316d0000000000000000000000000000000000000000000000000000000060005260046000fd5b9463ffffffff1693909190600285106138705761379b936137906113b5600054600052600160205263ffffffff6002604060002001541690565b92600054948861303f565b15613846577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff60206137e8600054600052600160205263ffffffff6002604060002001541690565b94015116910163ffffffff81116124375763ffffffff160163ffffffff81116124375763ffffffff80911691161061381c57565b7fb9310b560000000000000000000000000000000000000000000000000000000060005260046000fd5b7f7344e0b70000000000000000000000000000000000000000000000000000000060005260046000fd5b7f8e082f670000000000000000000000000000000000000000000000000000000060005260046000fd5b6040516138ab602082018093612341565b610120815261294061014082611ebc565b919091821561394f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301838111612437576138fa81858461302f565b3591600091805b61390d57509193505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0194859361393d85838561302f565b35845260205260408320939095613901565b506000915056fea2646970667358221220b9d2483a12aed84436cfae200d22a5ef18053d0e43e169a9a55b48c88c99e04264736f6c634300081c0033";

type RiftExchangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RiftExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RiftExchange__factory extends ContractFactory {
  constructor(...args: RiftExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _mmrRoot: BytesLike,
    _depositToken: string,
    _circuitVerificationKey: BytesLike,
    _verifier: string,
    _feeRouter: string,
    _tipBlockLeaf: Types.BlockLeafStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<RiftExchange> {
    return super.deploy(
      _mmrRoot,
      _depositToken,
      _circuitVerificationKey,
      _verifier,
      _feeRouter,
      _tipBlockLeaf,
      overrides || {}
    ) as Promise<RiftExchange>;
  }
  override getDeployTransaction(
    _mmrRoot: BytesLike,
    _depositToken: string,
    _circuitVerificationKey: BytesLike,
    _verifier: string,
    _feeRouter: string,
    _tipBlockLeaf: Types.BlockLeafStruct,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _mmrRoot,
      _depositToken,
      _circuitVerificationKey,
      _verifier,
      _feeRouter,
      _tipBlockLeaf,
      overrides || {}
    );
  }
  override attach(address: string): RiftExchange {
    return super.attach(address) as RiftExchange;
  }
  override connect(signer: Signer): RiftExchange__factory {
    return super.connect(signer) as RiftExchange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RiftExchangeInterface {
    return new utils.Interface(_abi) as RiftExchangeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RiftExchange {
    return new Contract(address, _abi, signerOrProvider) as RiftExchange;
  }
}
